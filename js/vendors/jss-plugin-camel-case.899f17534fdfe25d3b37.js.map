{"version":3,"sources":["webpack://material-ui-chameleon-gh-pages/./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js"],"names":[],"mappings":"8KASA,WAAqB,EAAO,CAC1B,GAAI,GAAY,GAEhB,OAAS,KAAQ,GAAO,CACtB,GAAI,GAAM,EAAK,QAAQ,QAAU,EAAI,EAAO,QAAU,GACtD,EAAU,GAAO,EAAM,GAGzB,MAAI,GAAM,WACR,CAAI,MAAM,QAAQ,EAAM,WAAY,EAAU,UAAY,EAAM,UAAU,IAAI,GAAkB,EAAU,UAAY,EAAY,EAAM,YAGnI,EAST,YAAqB,CACnB,WAAwB,EAAO,CAC7B,GAAI,MAAM,QAAQ,GAAQ,CAExB,OAAS,GAAQ,EAAG,EAAQ,EAAM,OAAQ,IACxC,EAAM,GAAS,EAAY,EAAM,IAGnC,MAAO,GAGT,MAAO,GAAY,GAGrB,WAAuB,EAAO,EAAM,EAAM,CACxC,GAAI,EAAK,QAAQ,QAAU,EACzB,MAAO,GAGT,GAAI,GAAiB,QAAU,GAE/B,MAAI,KAAS,EAAuB,EACpC,GAAK,KAAK,EAAgB,GAEnB,MAGT,MAAO,CACL,iBACA,iBAIJ,QAAe","file":"js/vendors/jss-plugin-camel-case.899f17534fdfe25d3b37.js","sourcesContent":["import hyphenate from 'hyphenate-style-name';\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\n\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    var key = prop.indexOf('--') === 0 ? prop : hyphenate(prop);\n    converted[key] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\n\n\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    if (prop.indexOf('--') === 0) {\n      return value;\n    }\n\n    var hyphenatedProp = hyphenate(prop); // There was no camel case in place\n\n    if (prop === hyphenatedProp) return value;\n    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.\n\n    return null;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}\n\nexport default camelCase;\n"],"sourceRoot":""}