{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/path-to-regexp/index.js"],"names":[],"mappings":"sHAIA,EAAO,QAAU,EAKjB,GAAI,GAAwB,YAkB5B,WAAsB,EAAM,EAAM,EAAS,CACzC,EAAU,GAAW,GACrB,EAAO,GAAQ,GACf,GAAI,GAAS,EAAQ,OACjB,EAAM,EAAQ,MAAQ,GACtB,EAAQ,EAAQ,UAAY,GAAK,IACjC,EAAc,EACd,EAAa,EAAK,OAClB,EAAI,EACJ,EAAO,EACP,EAEJ,GAAI,YAAgB,QAAQ,CAC1B,KAAO,EAAI,EAAsB,KAAK,EAAK,SACzC,EAAK,KAAK,CACR,KAAM,IACN,SAAU,GACV,OAAQ,EAAE,QAId,MAAO,GAGT,GAAI,MAAM,QAAQ,GAIhB,SAAO,EAAK,IAAI,SAAU,EAAO,CAC/B,MAAO,GAAa,EAAO,EAAM,GAAS,SAGrC,GAAI,QAAO,MAAQ,EAAK,KAAK,KAAO,IAAK,GAyClD,IAtCA,EAAQ,KAAM,EAAQ,GAAS,GAAK,EAAK,EAAK,OAAS,KAAO,IAAM,IAAM,OACvE,QAAQ,QAAS,QACjB,QAAQ,YAAa,QACrB,QAAQ,4CAA6C,SAAU,EAAO,EAAO,EAAQ,EAAK,EAAS,EAAM,EAAU,EAAQ,CAC1H,EAAQ,GAAS,GACjB,EAAS,GAAU,GACnB,EAAU,GAAW,SAAW,EAAS,OACzC,EAAW,GAAY,GAEvB,EAAK,KAAK,CACR,KAAM,EACN,SAAU,CAAC,CAAC,EACZ,OAAQ,EAAS,IAGnB,GAAI,GAAS,GACR,GAAW,GAAK,GACjB,MACA,EAAU,GAAW,EAAQ,IAAM,EAClC,GAAO,WAAa,EAAS,UAAY,IAC1C,IACA,EAEJ,UAAe,EAAO,OAAS,EAAM,OAE9B,IAER,QAAQ,MAAO,SAAU,EAAM,EAAO,CAGrC,OAFI,GAAM,EAAK,OAER,KAAQ,GAAc,EAAK,GAAK,OAAS,GAC9C,EAAK,GAAK,QAAU,EAGtB,MAAO,SAIJ,EAAI,EAAsB,KAAK,IAAO,CAI3C,OAHI,GAAc,EACd,EAAQ,EAAE,MAEP,EAAK,OAAO,EAAE,KAAW,MAC9B,IAIE,EAAc,GAAM,GAIpB,IAAa,IAAM,EAAK,QAAU,EAAK,EAAa,GAAG,OAAS,EAAE,QACpE,EAAK,OAAO,EAAa,EAAG,EAAG,CAC7B,KAAM,IACN,SAAU,GACV,OAAQ,EAAE,QAId,KAIF,UAAS,EAAM,IAAO,EAAK,EAAK,OAAS,KAAO,IAAM,GAAK,YAEpD,GAAI,QAAO,EAAM","file":"js/vendors/path-to-regexp.ba861eaf875993e12161.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"],"sourceRoot":""}