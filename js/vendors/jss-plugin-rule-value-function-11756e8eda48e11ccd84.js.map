{"version":3,"sources":["webpack:///./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js"],"names":["now","Date","fnValuesNs","fnRuleNs","onCreateRule","name","decl","options","rule","createRule","onProcessStyle","style","fnValues","prop","value","onUpdate","data","sheet","styleRule","fnRule"],"mappings":"6JAAA,YAEIA,EAAMC,KAAKD,MACXE,EAAa,WAAaF,EAC1BG,EAAW,aAAcH,E,MAC7B,WACE,MAAO,CACLI,aAAc,SAAsBC,EAAMC,EAAMC,GAC9C,GAAoB,mBAATD,EAAqB,OAAO,KACvC,IAAIE,GAAO,IAAAC,YAAWJ,EAAM,GAAIE,GAEhC,OADAC,EAAKL,GAAYG,EACVE,GAETE,eAAgB,SAAwBC,EAAOH,GAK7C,GAAIN,KAAcM,GAAQL,KAAYK,EAAM,OAAOG,EACnD,IAAIC,EAAW,GAEf,IAAK,IAAIC,KAAQF,EAAO,CACtB,IAAIG,EAAQH,EAAME,GACG,mBAAVC,WACJH,EAAME,GACbD,EAASC,GAAQC,GAKnB,OADAN,EAAKN,GAAcU,EACZD,GAETI,SAAU,SAAkBC,EAAMR,EAAMS,EAAOV,GAC7C,IAAIW,EAAYV,EACZW,EAASD,EAAUf,GAGnBgB,IAGFD,EAAUP,MAAQQ,EAAOH,IAAS,IAGpC,IAAIJ,EAAWM,EAAUhB,GAEzB,GAAIU,EACF,IAAK,IAAIC,KAAQD,EACfM,EAAUL,KAAKA,EAAMD,EAASC,GAAMG,GAAOT,M","file":"js/vendors/jss-plugin-rule-value-function-11756e8eda48e11ccd84.js","sourcesContent":["import { createRule } from 'jss';\n\nvar now = Date.now();\nvar fnValuesNs = \"fnValues\" + now;\nvar fnRuleNs = \"fnStyle\" + ++now;\nfunction functionPlugin() {\n  return {\n    onCreateRule: function onCreateRule(name, decl, options) {\n      if (typeof decl !== 'function') return null;\n      var rule = createRule(name, {}, options);\n      rule[fnRuleNs] = decl;\n      return rule;\n    },\n    onProcessStyle: function onProcessStyle(style, rule) {\n      // We need to extract function values from the declaration, so that we can keep core unaware of them.\n      // We need to do that only once.\n      // We don't need to extract functions on each style update, since this can happen only once.\n      // We don't support function values inside of function rules.\n      if (fnValuesNs in rule || fnRuleNs in rule) return style;\n      var fnValues = {};\n\n      for (var prop in style) {\n        var value = style[prop];\n        if (typeof value !== 'function') continue;\n        delete style[prop];\n        fnValues[prop] = value;\n      } // $FlowFixMe\n\n\n      rule[fnValuesNs] = fnValues;\n      return style;\n    },\n    onUpdate: function onUpdate(data, rule, sheet, options) {\n      var styleRule = rule;\n      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object\n      // will be returned from that function.\n\n      if (fnRule) {\n        // Empty object will remove all currently defined props\n        // in case function rule returns a falsy value.\n        styleRule.style = fnRule(data) || {};\n      }\n\n      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.\n\n      if (fnValues) {\n        for (var prop in fnValues) {\n          styleRule.prop(prop, fnValues[prop](data), options);\n        }\n      }\n    }\n  };\n}\n\nexport default functionPlugin;\n"],"sourceRoot":""}