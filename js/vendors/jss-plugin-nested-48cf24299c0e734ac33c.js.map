{"version":3,"sources":["webpack:///./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js"],"names":["separatorRegExp","parentRegExp","refRegExp","getReplaceRef","container","sheet","match","key","rule","getRule","selector","replaceParentRefs","nestedProp","parentProp","parentSelectors","split","nestedSelectors","result","i","length","parent","j","nested","indexOf","replace","getOptions","options","index","nestingLevel","undefined","onProcessStyle","style","type","replaceRef","styleRule","prop","isNested","isNestedConditional","addRule"],"mappings":"wKAAA,cAGIA,GAFJ,UAEsB,YAClBC,EAAe,KACfC,EAAY,c,MAQhB,WAEE,SAASC,EAAcC,EAAWC,GAChC,OAAO,SAAUC,EAAOC,GACtB,IAAIC,EAAOJ,EAAUK,QAAQF,IAAQF,GAASA,EAAMI,QAAQF,GAE5D,OAAIC,GACFA,EAAOA,GACKE,SAIPH,GAIX,SAASI,EAAkBC,EAAYC,GAKrC,IAJA,IAAIC,EAAkBD,EAAWE,MAAMf,GACnCgB,EAAkBJ,EAAWG,MAAMf,GACnCiB,EAAS,GAEJC,EAAI,EAAGA,EAAIJ,EAAgBK,OAAQD,IAG1C,IAFA,IAAIE,EAASN,EAAgBI,GAEpBG,EAAI,EAAGA,EAAIL,EAAgBG,OAAQE,IAAK,CAC/C,IAAIC,EAASN,EAAgBK,GACzBJ,IAAQA,GAAU,MAEtBA,IAAmC,IAAzBK,EAAOC,QAAQ,KAAcD,EAAOE,QAAQvB,EAAcmB,GAAUA,EAAS,IAAME,EAIjG,OAAOL,EAGT,SAASQ,EAAWjB,EAAMJ,EAAWsB,GAEnC,GAAIA,EAAS,OAAO,aAAS,GAAIA,EAAS,CACxCC,MAAOD,EAAQC,MAAQ,IAEzB,IAAIC,EAAepB,EAAKkB,QAAQE,aAEhC,OADAA,OAAgCC,IAAjBD,EAA6B,EAAIA,EAAe,GACxD,aAAS,GAAIpB,EAAKkB,QAAS,CAChCE,aAAcA,EACdD,MAAOvB,EAAUmB,QAAQf,GAAQ,IA2CrC,MAAO,CACLsB,eAxCF,SAAwBC,EAAOvB,EAAMH,GACnC,GAAkB,UAAdG,EAAKwB,KAAkB,OAAOD,EAClC,IAEIL,EACAO,EAHAC,EAAY1B,EACZJ,EAAY8B,EAAUR,QAAQN,OAIlC,IAAK,IAAIe,KAAQJ,EAAO,CACtB,IAAIK,GAAkC,IAAvBD,EAAKZ,QAAQ,KACxBc,EAAkC,MAAZF,EAAK,GAC/B,GAAKC,GAAaC,EAAlB,CAGA,GAFAX,EAAUD,EAAWS,EAAW9B,EAAWsB,GAEvCU,EAAU,CACZ,IAAI1B,EAAWC,EAAkBwB,EAAMD,EAAUxB,UAG5CuB,IAAYA,EAAa9B,EAAcC,EAAWC,IAEvDK,EAAWA,EAASc,QAAQtB,EAAW+B,GACvC7B,EAAUkC,QAAQ5B,EAAUqB,EAAMI,IAAO,aAAS,GAAIT,EAAS,CAC7DhB,SAAUA,UAEH2B,GAETjC,EAAUkC,QAAQH,EAAM,GAAIT,GAG3BY,QAAQJ,EAAU3B,IAAKwB,EAAMI,GAAO,CACnCzB,SAAUwB,EAAUxB,kBAIjBqB,EAAMI,IAGf,OAAOJ,K","file":"js/vendors/jss-plugin-nested-48cf24299c0e734ac33c.js","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport warning from 'tiny-warning';\n\nvar separatorRegExp = /\\s*,\\s*/g;\nvar parentRegExp = /&/g;\nvar refRegExp = /\\$([\\w-]+)/g;\n/**\n * Convert nested rules to separate, remove them from original styles.\n *\n * @param {Rule} rule\n * @api public\n */\n\nfunction jssNested() {\n  // Get a function to be used for $ref replacement.\n  function getReplaceRef(container, sheet) {\n    return function (match, key) {\n      var rule = container.getRule(key) || sheet && sheet.getRule(key);\n\n      if (rule) {\n        rule = rule;\n        return rule.selector;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Could not find the referenced rule \\\"\" + key + \"\\\" in \\\"\" + (container.options.meta || container.toString()) + \"\\\".\") : void 0;\n      return key;\n    };\n  }\n\n  function replaceParentRefs(nestedProp, parentProp) {\n    var parentSelectors = parentProp.split(separatorRegExp);\n    var nestedSelectors = nestedProp.split(separatorRegExp);\n    var result = '';\n\n    for (var i = 0; i < parentSelectors.length; i++) {\n      var parent = parentSelectors[i];\n\n      for (var j = 0; j < nestedSelectors.length; j++) {\n        var nested = nestedSelectors[j];\n        if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.\n\n        result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + \" \" + nested;\n      }\n    }\n\n    return result;\n  }\n\n  function getOptions(rule, container, options) {\n    // Options has been already created, now we only increase index.\n    if (options) return _extends({}, options, {\n      index: options.index + 1\n    });\n    var nestingLevel = rule.options.nestingLevel;\n    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;\n    return _extends({}, rule.options, {\n      nestingLevel: nestingLevel,\n      index: container.indexOf(rule) + 1\n    });\n  }\n\n  function onProcessStyle(style, rule, sheet) {\n    if (rule.type !== 'style') return style;\n    var styleRule = rule;\n    var container = styleRule.options.parent;\n    var options;\n    var replaceRef;\n\n    for (var prop in style) {\n      var isNested = prop.indexOf('&') !== -1;\n      var isNestedConditional = prop[0] === '@';\n      if (!isNested && !isNestedConditional) continue;\n      options = getOptions(styleRule, container, options);\n\n      if (isNested) {\n        var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for\n        // all nested rules within the sheet.\n\n        if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.\n\n        selector = selector.replace(refRegExp, replaceRef);\n        container.addRule(selector, style[prop], _extends({}, options, {\n          selector: selector\n        }));\n      } else if (isNestedConditional) {\n        // Place conditional right after the parent rule to ensure right ordering.\n        container.addRule(prop, {}, options) // Flow expects more options but they aren't required\n        // And flow doesn't know this will always be a StyleRule which has the addRule method\n        // $FlowFixMe\n        .addRule(styleRule.key, style[prop], {\n          selector: styleRule.selector\n        });\n      }\n\n      delete style[prop];\n    }\n\n    return style;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle\n  };\n}\n\nexport default jssNested;\n"],"sourceRoot":""}