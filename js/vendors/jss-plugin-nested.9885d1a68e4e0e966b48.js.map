{"version":3,"sources":["webpack://material-ui-chameleon-gh-pages/./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js"],"names":[],"mappings":"+KAGI,EAAkB,WAClB,EAAe,KACf,EAAY,cAQhB,YAAqB,CAEnB,WAAuB,EAAW,EAAO,CACvC,MAAO,UAAU,EAAO,EAAK,CAC3B,GAAI,GAAO,EAAU,QAAQ,IAAQ,GAAS,EAAM,QAAQ,GAE5D,MAAI,GACF,GAAO,EACA,EAAK,UAIP,GAIX,WAA2B,EAAY,EAAY,CAKjD,OAJI,GAAkB,EAAW,MAAM,GACnC,EAAkB,EAAW,MAAM,GACnC,EAAS,GAEJ,EAAI,EAAG,EAAI,EAAgB,OAAQ,IAG1C,OAFI,GAAS,EAAgB,GAEpB,EAAI,EAAG,EAAI,EAAgB,OAAQ,IAAK,CAC/C,GAAI,GAAS,EAAgB,GACzB,GAAQ,IAAU,MAEtB,GAAU,EAAO,QAAQ,OAAS,GAAK,EAAO,QAAQ,EAAc,GAAU,EAAS,IAAM,EAIjG,MAAO,GAGT,WAAoB,EAAM,EAAW,EAAa,CAEhD,GAAI,EAAa,MAAO,QAAS,GAAI,EAAa,CAChD,MAAO,EAAY,MAAQ,IAG7B,GAAI,GAAe,EAAK,QAAQ,aAChC,EAAe,IAAiB,OAAY,EAAI,EAAe,EAE/D,GAAI,GAAU,QAAS,GAAI,EAAK,QAAS,CACvC,eACA,MAAO,EAAU,QAAQ,GAAQ,IAInC,aAAO,GAAQ,KACR,EAGT,WAAwB,EAAO,EAAM,EAAO,CAC1C,GAAI,EAAK,OAAS,QAAS,MAAO,GAClC,GAAI,GAAY,EACZ,EAAY,EAAU,QAAQ,OAC9B,EACA,EAEJ,OAAS,KAAQ,GAAO,CACtB,GAAI,GAAW,EAAK,QAAQ,OAAS,GACjC,EAAsB,EAAK,KAAO,IACtC,GAAI,GAAC,GAAY,CAAC,GAGlB,IAFA,EAAU,EAAW,EAAW,EAAW,GAEvC,EAAU,CACZ,GAAI,GAAW,EAAkB,EAAM,EAAU,UAG5C,GAAY,GAAa,EAAc,EAAW,IAEvD,EAAW,EAAS,QAAQ,EAAW,GACvC,EAAU,QAAQ,EAAU,EAAM,GAAO,QAAS,GAAI,EAAS,CAC7D,kBAEO,IAET,EAAU,QAAQ,EAAM,GAAI,GAI3B,QAAQ,EAAU,IAAK,EAAM,GAAO,CACnC,SAAU,EAAU,WAIxB,MAAO,GAAM,IAGf,MAAO,GAGT,MAAO,CACL,kBAIJ,QAAe","file":"js/vendors/jss-plugin-nested.9885d1a68e4e0e966b48.js","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport warning from 'tiny-warning';\n\nvar separatorRegExp = /\\s*,\\s*/g;\nvar parentRegExp = /&/g;\nvar refRegExp = /\\$([\\w-]+)/g;\n/**\n * Convert nested rules to separate, remove them from original styles.\n *\n * @param {Rule} rule\n * @api public\n */\n\nfunction jssNested() {\n  // Get a function to be used for $ref replacement.\n  function getReplaceRef(container, sheet) {\n    return function (match, key) {\n      var rule = container.getRule(key) || sheet && sheet.getRule(key);\n\n      if (rule) {\n        rule = rule;\n        return rule.selector;\n      }\n\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Could not find the referenced rule \\\"\" + key + \"\\\" in \\\"\" + (container.options.meta || container.toString()) + \"\\\".\") : void 0;\n      return key;\n    };\n  }\n\n  function replaceParentRefs(nestedProp, parentProp) {\n    var parentSelectors = parentProp.split(separatorRegExp);\n    var nestedSelectors = nestedProp.split(separatorRegExp);\n    var result = '';\n\n    for (var i = 0; i < parentSelectors.length; i++) {\n      var parent = parentSelectors[i];\n\n      for (var j = 0; j < nestedSelectors.length; j++) {\n        var nested = nestedSelectors[j];\n        if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.\n\n        result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + \" \" + nested;\n      }\n    }\n\n    return result;\n  }\n\n  function getOptions(rule, container, prevOptions) {\n    // Options has been already created, now we only increase index.\n    if (prevOptions) return _extends({}, prevOptions, {\n      index: prevOptions.index + 1 // $FlowFixMe[prop-missing]\n\n    });\n    var nestingLevel = rule.options.nestingLevel;\n    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;\n\n    var options = _extends({}, rule.options, {\n      nestingLevel: nestingLevel,\n      index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.\n\n    });\n\n    delete options.name;\n    return options;\n  }\n\n  function onProcessStyle(style, rule, sheet) {\n    if (rule.type !== 'style') return style;\n    var styleRule = rule;\n    var container = styleRule.options.parent;\n    var options;\n    var replaceRef;\n\n    for (var prop in style) {\n      var isNested = prop.indexOf('&') !== -1;\n      var isNestedConditional = prop[0] === '@';\n      if (!isNested && !isNestedConditional) continue;\n      options = getOptions(styleRule, container, options);\n\n      if (isNested) {\n        var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for\n        // all nested rules within the sheet.\n\n        if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.\n\n        selector = selector.replace(refRegExp, replaceRef);\n        container.addRule(selector, style[prop], _extends({}, options, {\n          selector: selector\n        }));\n      } else if (isNestedConditional) {\n        // Place conditional right after the parent rule to ensure right ordering.\n        container.addRule(prop, {}, options) // Flow expects more options but they aren't required\n        // And flow doesn't know this will always be a StyleRule which has the addRule method\n        // $FlowFixMe[incompatible-use]\n        // $FlowFixMe[prop-missing]\n        .addRule(styleRule.key, style[prop], {\n          selector: styleRule.selector\n        });\n      }\n\n      delete style[prop];\n    }\n\n    return style;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle\n  };\n}\n\nexport default jssNested;\n"],"sourceRoot":""}