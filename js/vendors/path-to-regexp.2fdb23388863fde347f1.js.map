{"version":3,"sources":["webpack://material-ui-chameleon-gh-pages/./node_modules/path-to-regexp/index.js"],"names":[],"mappings":"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","file":"js/vendors/path-to-regexp.2fdb23388863fde347f1.js","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"],"sourceRoot":""}