{"version":3,"sources":["webpack:///./node_modules/@material-ui/styles/esm/getStylesCreator/noopTheme.js","webpack:///./node_modules/@material-ui/styles/esm/getStylesCreator/getStylesCreator.js"],"names":["noopTheme","getStylesCreator","stylesOrCreator","themingEnabled","create","theme","name","styles","err","overrides","stylesWithOverrides","_extends","Object","keys","forEach","key","deepmerge","options"],"mappings":"2FAEeA,IADC,I,iCCDhB,sDAIe,SAASC,EAAiBC,GACvC,IAAIC,EAA4C,mBAApBD,EAQ5B,MAAO,CACLE,OAAQ,SAAgBC,EAAOC,GAC7B,IAAIC,EAEJ,IACEA,EAASJ,EAAiBD,EAAgBG,GAASH,EACnD,MAAOM,GAQP,MAAMA,EAGR,IAAKF,IAASD,EAAMI,YAAcJ,EAAMI,UAAUH,GAChD,OAAOC,EAGT,IAAIE,EAAYJ,EAAMI,UAAUH,GAE5BI,EAAsBC,YAAS,GAAIJ,GAWvC,OATAK,OAAOC,KAAKJ,GAAWK,SAAQ,SAAUC,GAOvCL,EAAoBK,GAAOC,YAAUN,EAAoBK,GAAMN,EAAUM,OAEpEL,GAETO,QAAS","file":"js/vendors/material-ui/styles/getstylescreator.646ae139dcad14ac8c70.js","sourcesContent":["// We use the same empty object to ref count the styles that don't need a theme object.\nvar noopTheme = {};\nexport default noopTheme;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { deepmerge } from '@material-ui/utils';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  var themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (_typeof(stylesOrCreator) !== 'object' && !themingEnabled) {\n      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n\n  return {\n    create: function create(theme, name) {\n      var styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n\n        throw err;\n      }\n\n      if (!name || !theme.overrides || !theme.overrides[name]) {\n        return styles;\n      }\n\n      var overrides = theme.overrides[name];\n\n      var stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(function (key) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['Material-UI: You are trying to override a style that does not exist.', \"Fix the `\".concat(key, \"` key of `theme.overrides.\").concat(name, \"`.\")].join('\\n'));\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key], overrides[key]);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}"],"sourceRoot":""}