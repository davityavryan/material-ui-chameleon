{"version":3,"sources":["webpack:///./node_modules/@material-ui/styles/esm/styled/index.js","webpack:///./node_modules/@material-ui/styles/esm/styled/styled.js"],"names":["Component","style","options","arguments","length","undefined","name","stylesOptions","filterProps","classNamePrefix","stylesOrCreator","theme","root","props","useStyles","displayName","propTypes","StyledComponent","React","forwardRef","ref","children","classNameProp","className","clone","ComponentProp","component","other","classes","spread","omit","cloneElement","FinalComponent","createElement","input","fields","output","Object","keys","forEach","prop","indexOf"],"mappings":"2OAAA,iB,uGCqBe,SAAgBA,GAkI7B,OAjIuB,SAA0BC,GAC/C,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAE9EG,EAAOJ,EAAQI,KACfC,GAAgB,aAAyBL,EAAS,CAAC,SAMvD,IA6BIM,EA7BAC,EAAkBH,EAalBI,EAAmC,mBAAVT,EAAuB,SAAUU,GAC5D,MAAO,CACLC,KAAM,SAAcC,GAClB,OAAOZ,GAAM,aAAS,CACpBU,MAAOA,GACNE,OAGL,CACFD,KAAMX,GAEJa,GAAY,aAAWJ,GAAiB,aAAS,CACnDV,UAAWA,EACXM,KAAMA,GAAQN,EAAUe,YACxBN,gBAAiBA,GAChBF,IAICN,EAAMO,cACRA,EAAcP,EAAMO,mBACbP,EAAMO,aAKXP,EAAMe,YACIf,EAAMe,iBACXf,EAAMe,WAKf,IAAIC,EAAkBC,UAAMC,YAAW,SAAyBN,EAAOO,GACrE,IAAIC,EAAWR,EAAMQ,SACjBC,EAAgBT,EAAMU,UACtBC,EAAQX,EAAMW,MACdC,EAAgBZ,EAAMa,UACtBC,GAAQ,aAAyBd,EAAO,CAAC,WAAY,YAAa,QAAS,cAE3Ee,EAAUd,EAAUD,GACpBU,GAAY,aAAKK,EAAQhB,KAAMU,GAC/BO,EAASF,EAMb,GAJInB,IACFqB,EAASC,EAAKD,EAAQrB,IAGpBgB,EACF,OAAON,UAAMa,aAAaV,GAAU,aAAS,CAC3CE,WAAW,aAAKF,EAASR,MAAMU,UAAWA,IACzCM,IAGL,GAAwB,mBAAbR,EACT,OAAOA,GAAS,aAAS,CACvBE,UAAWA,GACVM,IAGL,IAAIG,EAAiBP,GAAiBzB,EACtC,OAAoBkB,UAAMe,cAAcD,GAAgB,aAAS,CAC/DZ,IAAKA,EACLG,UAAWA,GACVM,GAASR,MAuCd,OADA,aAAqBJ,EAAiBjB,GAC/BiB,IApJX,cACA,UACA,UACA,WAGA,GAFA,QACA,MACA,UACA,WAEA,SAASa,EAAKI,EAAOC,GACnB,IAAIC,EAAS,GAMb,OALAC,OAAOC,KAAKJ,GAAOK,SAAQ,SAAUC,IACL,IAA1BL,EAAOM,QAAQD,KACjBJ,EAAOI,GAAQN,EAAMM,OAGlBJ","file":"js/vendors/material-ui/styles/styled-12b8b83b746362dc5827.js","sourcesContent":["export { default } from './styled';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { chainPropTypes, getDisplayName } from '@material-ui/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport makeStyles from '../makeStyles';\n\nfunction omit(input, fields) {\n  var output = {};\n  Object.keys(input).forEach(function (prop) {\n    if (fields.indexOf(prop) === -1) {\n      output[prop] = input[prop];\n    }\n  });\n  return output;\n} // styled-components's API removes the mapping between components and styles.\n// Using components as a low-level styling construct can be simpler.\n\n\nexport default function styled(Component) {\n  var componentCreator = function componentCreator(style) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var name = options.name,\n        stylesOptions = _objectWithoutProperties(options, [\"name\"]);\n\n    if (process.env.NODE_ENV !== 'production' && Component === undefined) {\n      throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\\n'));\n    }\n\n    var classNamePrefix = name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        // Provide a better DX outside production.\n        var displayName = getDisplayName(Component);\n\n        if (displayName !== undefined) {\n          classNamePrefix = displayName;\n        }\n      }\n    }\n\n    var stylesOrCreator = typeof style === 'function' ? function (theme) {\n      return {\n        root: function root(props) {\n          return style(_extends({\n            theme: theme\n          }, props));\n        }\n      };\n    } : {\n      root: style\n    };\n    var useStyles = makeStyles(stylesOrCreator, _extends({\n      Component: Component,\n      name: name || Component.displayName,\n      classNamePrefix: classNamePrefix\n    }, stylesOptions));\n    var filterProps;\n    var propTypes = {};\n\n    if (style.filterProps) {\n      filterProps = style.filterProps;\n      delete style.filterProps;\n    }\n    /* eslint-disable react/forbid-foreign-prop-types */\n\n\n    if (style.propTypes) {\n      propTypes = style.propTypes;\n      delete style.propTypes;\n    }\n    /* eslint-enable react/forbid-foreign-prop-types */\n\n\n    var StyledComponent = React.forwardRef(function StyledComponent(props, ref) {\n      var children = props.children,\n          classNameProp = props.className,\n          clone = props.clone,\n          ComponentProp = props.component,\n          other = _objectWithoutProperties(props, [\"children\", \"className\", \"clone\", \"component\"]);\n\n      var classes = useStyles(props);\n      var className = clsx(classes.root, classNameProp);\n      var spread = other;\n\n      if (filterProps) {\n        spread = omit(spread, filterProps);\n      }\n\n      if (clone) {\n        return React.cloneElement(children, _extends({\n          className: clsx(children.props.className, className)\n        }, spread));\n      }\n\n      if (typeof children === 'function') {\n        return children(_extends({\n          className: className\n        }, spread));\n      }\n\n      var FinalComponent = ComponentProp || Component;\n      return /*#__PURE__*/React.createElement(FinalComponent, _extends({\n        ref: ref,\n        className: className\n      }, spread), children);\n    });\n    process.env.NODE_ENV !== \"production\" ? StyledComponent.propTypes = _extends({\n      /**\n       * A render function or node.\n       */\n      children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n      /**\n       * @ignore\n       */\n      className: PropTypes.string,\n\n      /**\n       * If `true`, the component will recycle it's children DOM element.\n       * It's using `React.cloneElement` internally.\n       *\n       * This prop will be deprecated and removed in v5\n       */\n      clone: chainPropTypes(PropTypes.bool, function (props) {\n        if (props.clone && props.component) {\n          return new Error('You can not use the clone and component prop at the same time.');\n        }\n\n        return null;\n      }),\n\n      /**\n       * The component used for the root node.\n       * Either a string to use a DOM element or a component.\n       */\n      component: PropTypes.elementType\n    }, propTypes) : void 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      StyledComponent.displayName = \"Styled(\".concat(classNamePrefix, \")\");\n    }\n\n    hoistNonReactStatics(StyledComponent, Component);\n    return StyledComponent;\n  };\n\n  return componentCreator;\n}"],"sourceRoot":""}