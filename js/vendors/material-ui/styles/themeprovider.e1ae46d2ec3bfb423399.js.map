{"version":3,"sources":["webpack://material-ui-chameleon-gh-pages/./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js","webpack://material-ui-chameleon-gh-pages/./node_modules/@material-ui/styles/esm/ThemeProvider/nested.js"],"names":[],"mappings":"sNAQA,WAA8B,EAAY,EAAY,CACpD,GAAI,MAAO,IAAe,WAAY,CACpC,GAAI,GAAc,EAAW,GAQ7B,MAAO,GAGT,MAAO,QAAS,GAAI,EAAY,GASlC,WAAuB,EAAO,CAC5B,GAAI,GAAW,EAAM,SACjB,EAAa,EAAM,MACnB,EAAa,UAQb,EAAQ,UAAc,UAAY,CACpC,GAAI,GAAS,IAAe,KAAO,EAAa,EAAqB,EAAY,GAEjF,MAAI,IAAU,MACZ,GAAO,KAAU,IAAe,MAG3B,GACN,CAAC,EAAY,IAChB,MAAoB,iBAAoB,aAAuB,CAC7D,MAAO,GACN,GAmBL,QAAe,G,6CCvEf,GAAI,GAAY,MAAO,SAAW,YAAc,OAAO,IACvD,QAAe,EAAY,OAAO,IAAI,cAAgB","file":"js/vendors/material-ui/styles/themeprovider.e1ae46d2ec3bfb423399.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends({}, outerTheme, localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","var hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';"],"sourceRoot":""}