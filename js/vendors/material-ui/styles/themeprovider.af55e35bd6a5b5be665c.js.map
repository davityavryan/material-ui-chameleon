{"version":3,"sources":["webpack:///./node_modules/@material-ui/styles/esm/ThemeProvider/nested.js","webpack:///./node_modules/@material-ui/styles/esm/ThemeProvider/ThemeProvider.js"],"names":["hasSymbol","Symbol","for","ThemeProvider","props","children","localTheme","theme","outerTheme","useTheme","React","useMemo","output","_extends","mergeOuterLocalTheme","nested","createElement","ThemeContext","Provider","value"],"mappings":"2FAAA,IAAIA,EAA8B,mBAAXC,QAAyBA,OAAOC,IACxCF,MAAYC,OAAOC,IAAI,cAAgB,oB,iCCDtD,sDAuEeC,IAzCf,SAAuBC,GACrB,IAAIC,EAAWD,EAAMC,SACjBC,EAAaF,EAAMG,MACnBC,EAAaC,cAQbF,EAAQG,IAAMC,SAAQ,WACxB,IAAIC,EAAwB,OAAfJ,EAAsBF,EAlCvC,SAA8BE,EAAYF,GACxC,MAA0B,mBAAfA,EACSA,EAAWE,GAWxBK,YAASA,YAAS,GAAIL,GAAaF,GAqBQQ,CAAqBN,EAAYF,GAMjF,OAJc,MAAVM,IACFA,EAAOG,KAAyB,OAAfP,GAGZI,IACN,CAACN,EAAYE,IAChB,OAAoBE,IAAMM,cAAcC,IAAaC,SAAU,CAC7DC,MAAOZ,GACNF","file":"js/vendors/material-ui/styles/themeprovider.af55e35bd6a5b5be665c.js","sourcesContent":["var hasSymbol = typeof Symbol === 'function' && Symbol.for;\nexport default hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport ThemeContext from '../useTheme/ThemeContext';\nimport useTheme from '../useTheme';\nimport nested from './nested'; // To support composition of theme.\n\nfunction mergeOuterLocalTheme(outerTheme, localTheme) {\n  if (typeof localTheme === 'function') {\n    var mergedTheme = localTheme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!mergedTheme) {\n        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\\n'));\n      }\n    }\n\n    return mergedTheme;\n  }\n\n  return _extends(_extends({}, outerTheme), localTheme);\n}\n/**\n * This component takes a `theme` prop.\n * It makes the `theme` available down the React tree thanks to React context.\n * This component should preferably be used at **the root of your component tree**.\n */\n\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  var outerTheme = useTheme();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outerTheme === null && typeof localTheme === 'function') {\n      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\\n'));\n    }\n  }\n\n  var theme = React.useMemo(function () {\n    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);\n\n    if (output != null) {\n      output[nested] = outerTheme !== null;\n    }\n\n    return output;\n  }, [localTheme, outerTheme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: theme\n  }, children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;"],"sourceRoot":""}