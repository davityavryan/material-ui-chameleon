{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanel.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/ExpansionPanel/ExpansionPanelContext.js"],"names":[],"mappings":"qRAcW,EAAS,SAAgB,EAAO,CACzC,GAAI,GAAa,CACf,SAAU,EAAM,YAAY,SAAS,UAEvC,MAAO,CAEL,KAAM,CACJ,SAAU,WACV,WAAY,EAAM,YAAY,OAAO,CAAC,UAAW,GACjD,WAAY,CACV,SAAU,WACV,KAAM,EACN,IAAK,GACL,MAAO,EACP,OAAQ,EACR,QAAS,KACT,QAAS,EACT,gBAAiB,EAAM,QAAQ,QAC/B,WAAY,EAAM,YAAY,OAAO,CAAC,UAAW,oBAAqB,IAExE,gBAAiB,CACf,WAAY,CACV,QAAS,SAGb,aAAc,CACZ,OAAQ,SACR,gBAAiB,CACf,UAAW,GAEb,eAAgB,CACd,aAAc,GAEhB,WAAY,CACV,QAAS,IAGb,iBAAkB,CAChB,WAAY,CACV,QAAS,SAGb,aAAc,CACZ,gBAAiB,EAAM,QAAQ,OAAO,qBAK1C,QAAS,CACP,aAAc,EACd,gBAAiB,CACf,oBAAqB,EAAM,MAAM,aACjC,qBAAsB,EAAM,MAAM,cAEpC,eAAgB,CACd,uBAAwB,EAAM,MAAM,aACpC,wBAAyB,EAAM,MAAM,aAErC,kCAAmC,CACjC,uBAAwB,EACxB,wBAAyB,KAM/B,SAAU,GAGV,SAAU,KAGV,EAAa,GAQb,EAA8B,aAAiB,SAAwB,EAAO,EAAK,CAQrF,GAAI,GAAe,EAAM,SACrB,EAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAwB,EAAM,gBAC9B,EAAkB,IAA0B,OAAS,GAAQ,EAC7D,EAAkB,EAAM,SACxB,EAAW,IAAoB,OAAS,GAAQ,EAChD,EAAe,EAAM,SACrB,EAAW,EAAM,SACjB,EAAgB,EAAM,OACtB,EAAS,IAAkB,OAAS,GAAQ,EAC5C,EAAwB,EAAM,oBAC9B,EAAsB,IAA0B,OAAS,IAAW,EACpE,EAAkB,EAAM,gBACxB,EAAQ,QAAyB,EAAO,CAAC,WAAY,UAAW,YAAa,kBAAmB,WAAY,WAAY,WAAY,SAAU,sBAAuB,oBAErK,EAAiB,QAAc,CACjC,WAAY,EACZ,QAAS,EACT,KAAM,iBACN,MAAO,aAEL,EAAkB,QAAe,EAAgB,GACjD,EAAW,EAAgB,GAC3B,EAAmB,EAAgB,GAEnC,EAAe,cAAkB,SAAU,EAAO,CACpD,EAAiB,CAAC,GAEd,GACF,EAAS,EAAO,CAAC,IAElB,CAAC,EAAU,EAAU,IAEpB,EAAwB,mBAAuB,GAC/C,EAAyB,QAAS,GAClC,EAAU,EAAuB,GACjC,EAAW,EAAuB,MAAM,GAExC,EAAe,UAAc,UAAY,CAC3C,MAAO,CACL,WACA,WACA,OAAQ,IAET,CAAC,EAAU,EAAU,IACxB,MAAoB,iBAAoB,IAAO,QAAS,CACtD,UAAW,QAAK,EAAQ,KAAM,EAAW,GAAY,EAAQ,SAAU,GAAY,EAAQ,SAAU,CAAC,GAAU,EAAQ,SACxH,MACA,UACC,GAAqB,gBAAoB,aAAgC,CAC1E,MAAO,GACN,GAAuB,gBAAoB,EAAqB,QAAS,CAC1E,GAAI,EACJ,QAAS,QACR,GAA+B,gBAAoB,MAAO,CAC3D,kBAAmB,EAAQ,MAAM,GACjC,GAAI,EAAQ,MAAM,iBAClB,KAAM,UACL,OA4EL,QAAe,QAAW,EAAQ,CAChC,KAAM,sBACL,I,4DCzOC,EAAwB,gBAAoB,IAMhD,QAAe","file":"js/vendors/material-ui/core/expansionpanel.ce63fad9977574f0d700.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport Collapse from '../Collapse';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nimport ExpansionPanelContext from './ExpansionPanelContext';\nimport useControlled from '../utils/useControlled';\nexport var styles = function styles(theme) {\n  var transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      position: 'relative',\n      transition: theme.transitions.create(['margin'], transition),\n      '&:before': {\n        position: 'absolute',\n        left: 0,\n        top: -1,\n        right: 0,\n        height: 1,\n        content: '\"\"',\n        opacity: 1,\n        backgroundColor: theme.palette.divider,\n        transition: theme.transitions.create(['opacity', 'background-color'], transition)\n      },\n      '&:first-child': {\n        '&:before': {\n          display: 'none'\n        }\n      },\n      '&$expanded': {\n        margin: '16px 0',\n        '&:first-child': {\n          marginTop: 0\n        },\n        '&:last-child': {\n          marginBottom: 0\n        },\n        '&:before': {\n          opacity: 0\n        }\n      },\n      '&$expanded + &': {\n        '&:before': {\n          display: 'none'\n        }\n      },\n      '&$disabled': {\n        backgroundColor: theme.palette.action.disabledBackground\n      }\n    },\n\n    /* Styles applied to the root element if `square={false}`. */\n    rounded: {\n      borderRadius: 0,\n      '&:first-child': {\n        borderTopLeftRadius: theme.shape.borderRadius,\n        borderTopRightRadius: theme.shape.borderRadius\n      },\n      '&:last-child': {\n        borderBottomLeftRadius: theme.shape.borderRadius,\n        borderBottomRightRadius: theme.shape.borderRadius,\n        // Fix a rendering issue on Edge\n        '@supports (-ms-ime-align: auto)': {\n          borderBottomLeftRadius: 0,\n          borderBottomRightRadius: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `expanded={true}`. */\n    expanded: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {}\n  };\n};\nvar warnedOnce = false;\n/**\n * ⚠️ The ExpansionPanel component was renamed to Accordion to use a more common naming convention.\n *\n * You should use `import { Accordion } from '@material-ui/core'`\n * or `import Accordion from '@material-ui/core/Accordion'`.\n */\n\nvar ExpansionPanel = /*#__PURE__*/React.forwardRef(function ExpansionPanel(props, ref) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (!warnedOnce) {\n      warnedOnce = true;\n      console.error(['Material-UI: the ExpansionPanel component was renamed to Accordion to use a more common naming convention.', '', \"You should use `import { Accordion } from '@material-ui/core'`\", \"or `import Accordion from '@material-ui/core/Accordion'`\"].join('\\n'));\n    }\n  }\n\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$defaultExpande = props.defaultExpanded,\n      defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      expandedProp = props.expanded,\n      onChange = props.onChange,\n      _props$square = props.square,\n      square = _props$square === void 0 ? false : _props$square,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Collapse : _props$TransitionComp,\n      TransitionProps = props.TransitionProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"defaultExpanded\", \"disabled\", \"expanded\", \"onChange\", \"square\", \"TransitionComponent\", \"TransitionProps\"]);\n\n  var _useControlled = useControlled({\n    controlled: expandedProp,\n    default: defaultExpanded,\n    name: 'ExpansionPanel',\n    state: 'expanded'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      expanded = _useControlled2[0],\n      setExpandedState = _useControlled2[1];\n\n  var handleChange = React.useCallback(function (event) {\n    setExpandedState(!expanded);\n\n    if (onChange) {\n      onChange(event, !expanded);\n    }\n  }, [expanded, onChange, setExpandedState]);\n\n  var _React$Children$toArr = React.Children.toArray(childrenProp),\n      _React$Children$toArr2 = _toArray(_React$Children$toArr),\n      summary = _React$Children$toArr2[0],\n      children = _React$Children$toArr2.slice(1);\n\n  var contextValue = React.useMemo(function () {\n    return {\n      expanded: expanded,\n      disabled: disabled,\n      toggle: handleChange\n    };\n  }, [expanded, disabled, handleChange]);\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),\n    ref: ref,\n    square: square\n  }, other), /*#__PURE__*/React.createElement(ExpansionPanelContext.Provider, {\n    value: contextValue\n  }, summary), /*#__PURE__*/React.createElement(TransitionComponent, _extends({\n    in: expanded,\n    timeout: \"auto\"\n  }, TransitionProps), /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-labelledby\": summary.props.id,\n    id: summary.props['aria-controls'],\n    role: \"region\"\n  }, children)));\n});\nprocess.env.NODE_ENV !== \"production\" ? ExpansionPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the expansion panel.\n   */\n  children: chainPropTypes(PropTypes.node.isRequired, function (props) {\n    var summary = React.Children.toArray(props.children)[0];\n\n    if (isFragment(summary)) {\n      return new Error(\"Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. \" + 'Consider providing an array instead.');\n    }\n\n    if (! /*#__PURE__*/React.isValidElement(summary)) {\n      return new Error('Material-UI: Expected the first child of ExpansionPanel to be a valid element.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, expands the panel by default.\n   */\n  defaultExpanded: PropTypes.bool,\n\n  /**\n   * If `true`, the panel will be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, expands the panel, otherwise collapse it.\n   * Setting this prop enables control over the panel.\n   */\n  expanded: PropTypes.bool,\n\n  /**\n   * Callback fired when the expand/collapse state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {boolean} expanded The `expanded` state of the panel.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, rounded corners are disabled.\n   */\n  square: PropTypes.bool,\n\n  /**\n   * The component used for the collapse effect.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiExpansionPanel'\n})(ExpansionPanel);","import * as React from 'react';\n/**\n * @ignore - internal component.\n * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}\n */\n\nvar ExpansionPanelContext = React.createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ExpansionPanelContext.displayName = 'ExpansionPanelContext';\n}\n\nexport default ExpansionPanelContext;"],"sourceRoot":""}