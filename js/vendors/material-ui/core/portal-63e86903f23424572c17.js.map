{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Portal/index.js","webpack:///./node_modules/@material-ui/core/esm/Portal/Portal.js"],"names":["useEnhancedEffect","window","React","useLayoutEffect","useEffect","forwardRef","props","ref","children","container","_props$disablePortal","disablePortal","onRendered","_React$useState","useState","mountNode","setMountNode","handleRef","isValidElement","ReactDOM","findDOMNode","getContainer","document","body","cloneElement","createPortal"],"mappings":"2OAAA,iB,8GCAA,cACA,WAGA,GAFA,QACA,MACA,UACA,WAQA,IAAIA,EAAsC,oBAAXC,OAAyBC,UAAMC,gBAAkBD,UAAME,U,MAMzEF,UAAMG,YAAW,SAAgBC,EAAOC,GACnD,IAAIC,EAAWF,EAAME,SACjBC,EAAYH,EAAMG,UAClBC,EAAuBJ,EAAMK,cAC7BA,OAAyC,IAAzBD,GAA0CA,EAC1DE,EAAaN,EAAMM,WAEnBC,EAAkBX,UAAMY,SAAS,MACjCC,EAAYF,EAAgB,GAC5BG,EAAeH,EAAgB,GAE/BI,GAAY,aAAWf,UAAMgB,eAAeV,GAAYA,EAASD,IAAM,KAAMA,GAsBjF,OArBAP,GAAkB,WACXW,GACHK,EA1BN,SAAsBP,GAGpB,OAFAA,EAAiC,mBAAdA,EAA2BA,IAAcA,EAErDU,UAASC,YAAYX,GAuBXY,CAAaZ,IAAca,SAASC,QAElD,CAACd,EAAWE,IACfX,GAAkB,WAChB,GAAIe,IAAcJ,EAEhB,OADA,aAAOJ,EAAKQ,GACL,YACL,aAAOR,EAAK,SAKf,CAACA,EAAKQ,EAAWJ,IACpBX,GAAkB,WACZY,IAAeG,GAAaJ,IAC9BC,MAED,CAACA,EAAYG,EAAWJ,IAEvBA,EACET,UAAMgB,eAAeV,GAChBN,UAAMsB,aAAahB,EAAU,CAClCD,IAAKU,IAIFT,EAGFO,EAAYI,UAASM,aAAajB,EAAUO,GAAaA,K","file":"js/vendors/material-ui/core/portal-63e86903f23424572c17.js","sourcesContent":["export { default } from './Portal';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      mountNode = _React$useState[0],\n      setMountNode = _React$useState[1];\n\n  var handleRef = useForkRef(React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(function () {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if (React.isValidElement(children)) {\n      return React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A node, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.instanceOf(React.Component), PropTypes.instanceOf(typeof Element === 'undefined' ? Object : Element)]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"],"sourceRoot":""}