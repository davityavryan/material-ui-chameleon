{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/FormHelperText/index.js","webpack:///./node_modules/@material-ui/core/esm/FormHelperText/FormHelperText.js"],"names":["styles","theme","root","color","palette","text","secondary","typography","caption","textAlign","marginTop","lineHeight","minHeight","margin","disabled","error","main","marginDense","contained","focused","filled","required","FormHelperText","React","forwardRef","props","ref","classes","className","_props$component","component","Component","other","variant","muiFormControl","fcs","states","createElement","dense","name"],"mappings":"2OAAA,iB,uHCAA,cACA,UACA,UAEA,GADA,QACA,SACA,WACA,WACA,WACWA,EAAS,SAAgBC,GAClC,MAAO,CAELC,MAAM,aAAS,CACbC,MAAOF,EAAMG,QAAQC,KAAKC,WACzBL,EAAMM,WAAWC,QAAS,CAC3BC,UAAW,OACXC,UAAW,EACXC,WAAY,MACZC,UAAW,MACXC,OAAQ,EACR,aAAc,CACZV,MAAOF,EAAMG,QAAQC,KAAKS,UAE5B,UAAW,CACTX,MAAOF,EAAMG,QAAQW,MAAMC,QAK/BD,MAAO,GAGPD,SAAU,GAGVG,YAAa,CACXP,UAAW,GAIbQ,UAAW,CACTL,OAAQ,cAIVM,QAAS,GAGTC,OAAQ,GAGRC,SAAU,K,WAGd,IAAIC,EAAiBC,UAAMC,YAAW,SAAwBC,EAAOC,GACnE,IAAIC,EAAUF,EAAME,QAChBC,EAAYH,EAAMG,UAClBC,EAAmBJ,EAAMK,UACzBC,OAAiC,IAArBF,EAA8B,IAAMA,EAQhDG,GAPWP,EAAMX,SACTW,EAAMV,MACLU,EAAML,OACLK,EAAMN,QACPM,EAAMZ,OACJY,EAAMJ,SACPI,EAAMQ,SACR,aAAyBR,EAAO,CAAC,UAAW,YAAa,YAAa,WAAY,QAAS,SAAU,UAAW,SAAU,WAAY,aAE9IS,GAAiB,eACjBC,GAAM,aAAiB,CACzBV,MAAOA,EACPS,eAAgBA,EAChBE,OAAQ,CAAC,UAAW,SAAU,WAAY,QAAS,SAAU,UAAW,cAE1E,OAAOb,UAAMc,cAAcN,GAAW,aAAS,CAC7CH,WAAW,aAAKD,EAAQzB,MAAuB,WAAhBiC,EAAIF,SAAwC,aAAhBE,EAAIF,UAA2BN,EAAQT,UAAWU,EAAyK,CACpRU,MAAOX,EAAQV,aACfkB,EAAItB,QAFkHsB,EAAIrB,UAAYa,EAAQb,SAAUqB,EAAIpB,OAASY,EAAQZ,MAAOoB,EAAIf,QAAUO,EAAQP,OAAQe,EAAIhB,SAAWQ,EAAQR,QAASgB,EAAId,UAAYM,EAAQN,UAG5QK,IAAKA,GACJM,O,GA6DU,aAAWhC,EAAQ,CAChCuC,KAAM,qBADO,CAEZjB,G","file":"js/vendors/material-ui/core/formhelpertext-71f9c9c825e95a5afa5e.js","sourcesContent":["export { default } from './FormHelperText';","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.caption, {\n      textAlign: 'left',\n      marginTop: 8,\n      lineHeight: '1em',\n      minHeight: '1em',\n      margin: 0,\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      marginTop: 4\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: {\n      margin: '8px 14px 0'\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {}\n  };\n};\nvar FormHelperText = React.forwardRef(function FormHelperText(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'p' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      margin = props.margin,\n      required = props.required,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"margin\", \"required\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, {\n      dense: classes.marginDense\n    }[fcs.margin]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormHelperText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormHelperText'\n})(FormHelperText);"],"sourceRoot":""}