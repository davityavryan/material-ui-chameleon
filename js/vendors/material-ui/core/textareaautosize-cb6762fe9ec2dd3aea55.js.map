{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/TextareaAutosize/index.js","webpack:///./node_modules/@material-ui/core/esm/TextareaAutosize/TextareaAutosize.js"],"names":["getStyleValue","computedStyle","property","parseInt","useEnhancedEffect","window","React","useLayoutEffect","useEffect","styles","visibility","position","overflow","height","top","left","transform","forwardRef","props","ref","onChange","rows","rowsMax","_props$rowsMin","rowsMin","rowsMinProp","style","value","other","isControlled","useRef","current","inputRef","handleRef","shadowRef","_React$useState","useState","state","setState","syncHeight","useCallback","input","getComputedStyle","inputShallow","width","placeholder","boxSizing","padding","border","innerHeight","scrollHeight","singleRowHeight","outerHeight","Math","max","Number","min","outerHeightStyle","abs","prevState","handleResize","addEventListener","clear","removeEventListener","createElement","Fragment","event","className","readOnly","tabIndex"],"mappings":"2OAAA,iB,8GCAA,cACA,UACA,UAEA,GADA,QACA,WACA,WAEA,SAASA,EAAcC,EAAeC,GACpC,OAAOC,SAASF,EAAcC,GAAW,KAAO,EAGlD,IAAIE,EAAsC,oBAAXC,OAAyBC,UAAMC,gBAAkBD,UAAME,UAClFC,EAEM,CAENC,WAAY,SAEZC,SAAU,WAEVC,SAAU,SACVC,OAAQ,EACRC,IAAK,EACLC,KAAM,EAENC,UAAW,iB,EAGQV,UAAMW,YAAW,SAA0BC,EAAOC,GACvE,IAAIC,EAAWF,EAAME,SACjBC,EAAOH,EAAMG,KACbC,EAAUJ,EAAMI,QAChBC,EAAiBL,EAAMM,QACvBC,OAAiC,IAAnBF,EAA4B,EAAIA,EAC9CG,EAAQR,EAAMQ,MACdC,EAAQT,EAAMS,MACdC,GAAQ,aAAyBV,EAAO,CAAC,WAAY,OAAQ,UAAW,UAAW,QAAS,UAE5FM,EAAUH,GAAQI,EAGlBI,EADgBvB,UAAMwB,OAAgB,MAATH,GACAI,QAE7BC,EAAW1B,UAAMwB,OAAO,MACxBG,GAAY,aAAWd,EAAKa,GAC5BE,EAAY5B,UAAMwB,OAAO,MAEzBK,EAAkB7B,UAAM8B,SAAS,IACjCC,EAAQF,EAAgB,GACxBG,EAAWH,EAAgB,GAE3BI,EAAajC,UAAMkC,aAAY,WACjC,IAAIC,EAAQT,EAASD,QACjB9B,EAAgBI,OAAOqC,iBAAiBD,GACxCE,EAAeT,EAAUH,QAC7BY,EAAajB,MAAMkB,MAAQ3C,EAAc2C,MACzCD,EAAahB,MAAQc,EAAMd,OAAST,EAAM2B,aAAe,IACzD,IAAIC,EAAY7C,EAAc,cAC1B8C,EAAU/C,EAAcC,EAAe,kBAAoBD,EAAcC,EAAe,eACxF+C,EAAShD,EAAcC,EAAe,uBAAyBD,EAAcC,EAAe,oBAE5FgD,EAAcN,EAAaO,aAAeH,EAE9CJ,EAAahB,MAAQ,IACrB,IAAIwB,EAAkBR,EAAaO,aAAeH,EAE9CK,EAAcH,EAEdzB,IACF4B,EAAcC,KAAKC,IAAIC,OAAO/B,GAAW2B,EAAiBC,IAGxD9B,IACF8B,EAAcC,KAAKG,IAAID,OAAOjC,GAAW6B,EAAiBC,IAK5D,IAAIK,GAFJL,EAAcC,KAAKC,IAAIF,EAAaD,KAEgB,eAAdL,EAA6BC,EAAUC,EAAS,GAClFpC,EAAWyC,KAAKK,IAAIN,EAAcH,IAAgB,EACtDX,GAAS,SAAUqB,GAGjB,OAAIF,EAAmB,GAAKJ,KAAKK,KAAKC,EAAUF,kBAAoB,GAAKA,GAAoB,GAAKE,EAAU/C,WAAaA,EAChH,CACLA,SAAUA,EACV6C,iBAAkBA,GAIfE,OAER,CAACrC,EAASE,EAASN,EAAM2B,cAC5BvC,UAAME,WAAU,WACd,IAAIoD,GAAe,cAAS,WAC1BrB,OAGF,OADAlC,OAAOwD,iBAAiB,SAAUD,GAC3B,WACLA,EAAaE,QACbzD,OAAO0D,oBAAoB,SAAUH,MAEtC,CAACrB,IACJnC,GAAkB,WAChBmC,OAaF,OAAOjC,UAAM0D,cAAc1D,UAAM2D,SAAU,KAAM3D,UAAM0D,cAAc,YAAY,aAAS,CACxFrC,MAAOA,EACPP,SAZiB,SAAsB8C,GAClCrC,GACHU,IAGEnB,GACFA,EAAS8C,IAOX/C,IAAKc,EAELZ,KAAMG,EACNE,OAAO,aAAS,CACdb,OAAQwB,EAAMoB,iBAGd7C,SAAUyB,EAAMzB,SAAW,SAAW,MACrCc,IACFE,IAAStB,UAAM0D,cAAc,WAAY,CAC1C,eAAe,EACfG,UAAWjD,EAAMiD,UACjBC,UAAU,EACVjD,IAAKe,EACLmC,UAAW,EACX3C,OAAO,aAAS,GAAIjB,EAAe,GAAIiB,S","file":"js/vendors/material-ui/core/textareaautosize-cb6762fe9ec2dd3aea55.js","sourcesContent":["export { default } from './TextareaAutosize';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from '../utils/debounce';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getStyleValue(computedStyle, property) {\n  return parseInt(computedStyle[property], 10) || 0;\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nvar styles = {\n  /* Styles applied to the shadow textarea element. */\n  shadow: {\n    // Visibility needed to hide the extra text area on iPads\n    visibility: 'hidden',\n    // Remove from the content flow\n    position: 'absolute',\n    // Ignore the scrollbar width\n    overflow: 'hidden',\n    height: 0,\n    top: 0,\n    left: 0,\n    // Create a new layer, increase the isolation of the computed values\n    transform: 'translateZ(0)'\n  }\n};\nvar TextareaAutosize = React.forwardRef(function TextareaAutosize(props, ref) {\n  var onChange = props.onChange,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      _props$rowsMin = props.rowsMin,\n      rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin,\n      style = props.style,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"onChange\", \"rows\", \"rowsMax\", \"rowsMin\", \"style\", \"value\"]);\n\n  var rowsMin = rows || rowsMinProp;\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(ref, inputRef);\n  var shadowRef = React.useRef(null);\n\n  var _React$useState = React.useState({}),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var syncHeight = React.useCallback(function () {\n    var input = inputRef.current;\n    var computedStyle = window.getComputedStyle(input);\n    var inputShallow = shadowRef.current;\n    inputShallow.style.width = computedStyle.width;\n    inputShallow.value = input.value || props.placeholder || 'x';\n    var boxSizing = computedStyle['box-sizing'];\n    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');\n    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content\n\n    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row\n\n    inputShallow.value = 'x';\n    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content\n\n    var outerHeight = innerHeight;\n\n    if (rowsMin) {\n      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);\n    }\n\n    if (rowsMax) {\n      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);\n    }\n\n    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.\n\n    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);\n    var overflow = Math.abs(outerHeight - innerHeight) <= 1;\n    setState(function (prevState) {\n      // Need a large enough different to update the height.\n      // This prevents infinite rendering loop.\n      if (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow) {\n        return {\n          overflow: overflow,\n          outerHeightStyle: outerHeightStyle\n        };\n      }\n\n      return prevState;\n    });\n  }, [rowsMax, rowsMin, props.placeholder]);\n  React.useEffect(function () {\n    var handleResize = debounce(function () {\n      syncHeight();\n    });\n    window.addEventListener('resize', handleResize);\n    return function () {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [syncHeight]);\n  useEnhancedEffect(function () {\n    syncHeight();\n  });\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      syncHeight();\n    }\n\n    if (onChange) {\n      onChange(event);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"textarea\", _extends({\n    value: value,\n    onChange: handleChange,\n    ref: handleRef // Apply the rows prop to get a \"correct\" first SSR paint\n    ,\n    rows: rowsMin,\n    style: _extends({\n      height: state.outerHeightStyle,\n      // Need a large enough different to allow scrolling.\n      // This prevents infinite rendering loop.\n      overflow: state.overflow ? 'hidden' : null\n    }, style)\n  }, other)), React.createElement(\"textarea\", {\n    \"aria-hidden\": true,\n    className: props.className,\n    readOnly: true,\n    ref: shadowRef,\n    tabIndex: -1,\n    style: _extends({}, styles.shadow, {}, style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TextareaAutosize.propTypes = {\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Use `rowsMin` instead. The prop will be removed in v5.\n   *\n   * @deprecated\n   */\n  rows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Maximum number of rows to display.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Minimum number of rows to display.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.any\n} : void 0;\nexport default TextareaAutosize;"],"sourceRoot":""}