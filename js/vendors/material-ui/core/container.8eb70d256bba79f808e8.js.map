{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Container/Container.js"],"names":[],"mappings":"0OAQW,EAAS,SAAgB,EAAO,CACzC,MAAO,CAEL,KAAM,QAAgB,CACpB,MAAO,OACP,WAAY,OACZ,UAAW,aACX,YAAa,OACb,YAAa,EAAM,QAAQ,GAC3B,aAAc,EAAM,QAAQ,GAC5B,QAAS,SACR,EAAM,YAAY,GAAG,MAAO,CAC7B,YAAa,EAAM,QAAQ,GAC3B,aAAc,EAAM,QAAQ,KAI9B,eAAgB,CACd,YAAa,EACb,aAAc,GAIhB,MAAO,OAAO,KAAK,EAAM,YAAY,QAAQ,OAAO,SAAU,EAAK,EAAY,CAC7E,GAAI,GAAQ,EAAM,YAAY,OAAO,GAErC,MAAI,KAAU,GACZ,GAAI,EAAM,YAAY,GAAG,IAAe,CACtC,SAAU,IAIP,GACN,IAGH,WAAY,QAAgB,GAAI,EAAM,YAAY,GAAG,MAAO,CAC1D,SAAU,KAAK,IAAI,EAAM,YAAY,OAAO,GAAI,OAIlD,WAAY,QAAgB,GAAI,EAAM,YAAY,GAAG,MAAO,CAC1D,SAAU,EAAM,YAAY,OAAO,KAIrC,WAAY,QAAgB,GAAI,EAAM,YAAY,GAAG,MAAO,CAC1D,SAAU,EAAM,YAAY,OAAO,KAIrC,WAAY,QAAgB,GAAI,EAAM,YAAY,GAAG,MAAO,CAC1D,SAAU,EAAM,YAAY,OAAO,KAIrC,WAAY,QAAgB,GAAI,EAAM,YAAY,GAAG,MAAO,CAC1D,SAAU,EAAM,YAAY,OAAO,OAIrC,EAAyB,aAAiB,SAAmB,EAAO,EAAK,CAC3E,GAAI,GAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAmB,EAAM,UACzB,EAAY,IAAqB,OAAS,MAAQ,EAClD,EAAwB,EAAM,eAC9B,EAAiB,IAA0B,OAAS,GAAQ,EAC5D,EAAe,EAAM,MACrB,EAAQ,IAAiB,OAAS,GAAQ,EAC1C,EAAkB,EAAM,SACxB,EAAW,IAAoB,OAAS,KAAO,EAC/C,EAAQ,QAAyB,EAAO,CAAC,UAAW,YAAa,YAAa,iBAAkB,QAAS,aAE7G,MAAoB,iBAAoB,EAAW,QAAS,CAC1D,UAAW,cAAK,EAAQ,KAAM,EAAW,GAAS,EAAQ,MAAO,GAAkB,EAAQ,eAAgB,IAAa,IAAS,EAAQ,WAAW,OAAO,QAAW,OAAO,OAC7K,OACC,MAsDL,QAAe,QAAW,EAAQ,CAChC,KAAM,iBACL","file":"js/vendors/material-ui/core/container.8eb70d256bba79f808e8.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _defineProperty({\n      width: '100%',\n      marginLeft: 'auto',\n      boxSizing: 'border-box',\n      marginRight: 'auto',\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      display: 'block'\n    }, theme.breakpoints.up('sm'), {\n      paddingLeft: theme.spacing(3),\n      paddingRight: theme.spacing(3)\n    }),\n\n    /* Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: {\n      paddingLeft: 0,\n      paddingRight: 0\n    },\n\n    /* Styles applied to the root element if `fixed={true}`. */\n    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {\n      var value = theme.breakpoints.values[breakpoint];\n\n      if (value !== 0) {\n        acc[theme.breakpoints.up(breakpoint)] = {\n          maxWidth: value\n        };\n      }\n\n      return acc;\n    }, {}),\n\n    /* Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {\n      maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {\n      maxWidth: theme.breakpoints.values.sm\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {\n      maxWidth: theme.breakpoints.values.md\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {\n      maxWidth: theme.breakpoints.values.lg\n    }),\n\n    /* Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {\n      maxWidth: theme.breakpoints.values.xl\n    })\n  };\n};\nvar Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? false : _props$fixed,\n      _props$maxWidth = props.maxWidth,\n      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"fixed\", \"maxWidth\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes[\"maxWidth\".concat(capitalize(String(maxWidth)))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   */\n  fixed: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiContainer'\n})(Container);"],"sourceRoot":""}