{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Select/SelectInput.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Select/Select.js"],"names":[],"mappings":"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","file":"js/vendors/material-ui/core/select.d5d0358ffb827cfe6872.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ownerDocument from '../utils/ownerDocument';\nimport capitalize from '../utils/capitalize';\nimport { refType } from '@material-ui/utils';\nimport Menu from '../Menu/Menu';\nimport { isFilled } from '../InputBase/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\n\nfunction areEqualValues(a, b) {\n  if (_typeof(b) === 'object' && b !== null) {\n    return a === b;\n  }\n\n  return String(a) === String(b);\n}\n\nfunction isEmpty(display) {\n  return display == null || typeof display === 'string' && !display.trim();\n}\n/**\r\n * @ignore - internal component.\r\n */\n\n\nvar SelectInput = /*#__PURE__*/React.forwardRef(function SelectInput(props, ref) {\n  var ariaLabel = props['aria-label'],\n      autoFocus = props.autoFocus,\n      autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      inputRefProp = props.inputRef,\n      labelId = props.labelId,\n      _props$MenuProps = props.MenuProps,\n      MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,\n      multiple = props.multiple,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onFocus = props.onFocus,\n      onOpen = props.onOpen,\n      openProp = props.open,\n      readOnly = props.readOnly,\n      renderValue = props.renderValue,\n      _props$SelectDisplayP = props.SelectDisplayProps,\n      SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,\n      tabIndexProp = props.tabIndex,\n      type = props.type,\n      valueProp = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"aria-label\", \"autoFocus\", \"autoWidth\", \"children\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"displayEmpty\", \"IconComponent\", \"inputRef\", \"labelId\", \"MenuProps\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onOpen\", \"open\", \"readOnly\", \"renderValue\", \"SelectDisplayProps\", \"tabIndex\", \"type\", \"value\", \"variant\"]);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'Select'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      displayNode = _React$useState[0],\n      setDisplayNode = _React$useState[1];\n\n  var _React$useRef = React.useRef(openProp != null),\n      isOpenControlled = _React$useRef.current;\n\n  var _React$useState2 = React.useState(),\n      menuMinWidthState = _React$useState2[0],\n      setMenuMinWidthState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      openState = _React$useState3[0],\n      setOpenState = _React$useState3[1];\n\n  var handleRef = useForkRef(ref, inputRefProp);\n  React.useImperativeHandle(handleRef, function () {\n    return {\n      focus: function focus() {\n        displayNode.focus();\n      },\n      node: inputRef.current,\n      value: value\n    };\n  }, [displayNode, value]);\n  React.useEffect(function () {\n    if (autoFocus && displayNode) {\n      displayNode.focus();\n    }\n  }, [autoFocus, displayNode]);\n  React.useEffect(function () {\n    if (displayNode) {\n      var label = ownerDocument(displayNode).getElementById(labelId);\n\n      if (label) {\n        var handler = function handler() {\n          if (getSelection().isCollapsed) {\n            displayNode.focus();\n          }\n        };\n\n        label.addEventListener('click', handler);\n        return function () {\n          label.removeEventListener('click', handler);\n        };\n      }\n    }\n\n    return undefined;\n  }, [labelId, displayNode]);\n\n  var update = function update(open, event) {\n    if (open) {\n      if (onOpen) {\n        onOpen(event);\n      }\n    } else if (onClose) {\n      onClose(event);\n    }\n\n    if (!isOpenControlled) {\n      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);\n      setOpenState(open);\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(event) {\n    // Ignore everything but left-click\n    if (event.button !== 0) {\n      return;\n    } // Hijack the default focus behavior.\n\n\n    event.preventDefault();\n    displayNode.focus();\n    update(true, event);\n  };\n\n  var handleClose = function handleClose(event) {\n    update(false, event);\n  };\n\n  var childrenArray = React.Children.toArray(children); // Support autofill.\n\n  var handleChange = function handleChange(event) {\n    var index = childrenArray.map(function (child) {\n      return child.props.value;\n    }).indexOf(event.target.value);\n\n    if (index === -1) {\n      return;\n    }\n\n    var child = childrenArray[index];\n    setValue(child.props.value);\n\n    if (onChange) {\n      onChange(event, child);\n    }\n  };\n\n  var handleItemClick = function handleItemClick(child) {\n    return function (event) {\n      if (!multiple) {\n        update(false, event);\n      }\n\n      var newValue;\n\n      if (multiple) {\n        newValue = Array.isArray(value) ? value.slice() : [];\n        var itemIndex = value.indexOf(child.props.value);\n\n        if (itemIndex === -1) {\n          newValue.push(child.props.value);\n        } else {\n          newValue.splice(itemIndex, 1);\n        }\n      } else {\n        newValue = child.props.value;\n      }\n\n      if (child.props.onClick) {\n        child.props.onClick(event);\n      }\n\n      if (value === newValue) {\n        return;\n      }\n\n      setValue(newValue);\n\n      if (onChange) {\n        event.persist(); // Preact support, target is read only property on a native event.\n\n        Object.defineProperty(event, 'target', {\n          writable: true,\n          value: {\n            value: newValue,\n            name: name\n          }\n        });\n        onChange(event, child);\n      }\n    };\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (!readOnly) {\n      var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      'Enter'];\n\n      if (validKeys.indexOf(event.key) !== -1) {\n        event.preventDefault();\n        update(true, event);\n      }\n    }\n  };\n\n  var open = displayNode !== null && (isOpenControlled ? openProp : openState);\n\n  var handleBlur = function handleBlur(event) {\n    // if open event.stopImmediatePropagation\n    if (!open && onBlur) {\n      event.persist(); // Preact support, target is read only property on a native event.\n\n      Object.defineProperty(event, 'target', {\n        writable: true,\n        value: {\n          value: value,\n          name: name\n        }\n      });\n      onBlur(event);\n    }\n  };\n\n  delete other['aria-invalid'];\n  var display;\n  var displaySingle;\n  var displayMultiple = [];\n  var computeDisplay = false;\n  var foundMatch = false; // No need to display any value if the field is empty.\n\n  if (isFilled({\n    value: value\n  }) || displayEmpty) {\n    if (renderValue) {\n      display = renderValue(value);\n    } else {\n      computeDisplay = true;\n    }\n  }\n\n  var items = childrenArray.map(function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Select component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    var selected;\n\n    if (multiple) {\n      if (!Array.isArray(value)) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`.\" : _formatMuiErrorMessage(2));\n      }\n\n      selected = value.some(function (v) {\n        return areEqualValues(v, child.props.value);\n      });\n\n      if (selected && computeDisplay) {\n        displayMultiple.push(child.props.children);\n      }\n    } else {\n      selected = areEqualValues(value, child.props.value);\n\n      if (selected && computeDisplay) {\n        displaySingle = child.props.children;\n      }\n    }\n\n    if (selected) {\n      foundMatch = true;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      'aria-selected': selected ? 'true' : undefined,\n      onClick: handleItemClick(child),\n      onKeyUp: function onKeyUp(event) {\n        if (event.key === ' ') {\n          // otherwise our MenuItems dispatches a click event\n          // it's not behavior of the native <option> and causes\n          // the select to close immediately since we open on space keydown\n          event.preventDefault();\n        }\n\n        if (child.props.onKeyUp) {\n          child.props.onKeyUp(event);\n        }\n      },\n      role: 'option',\n      selected: selected,\n      value: undefined,\n      // The value is most likely not a valid HTML attribute.\n      'data-value': child.props.value // Instead, we provide it as a data attribute.\n\n    });\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (!foundMatch && !multiple && value !== '') {\n        var values = childrenArray.map(function (child) {\n          return child.props.value;\n        });\n        console.warn([\"Material-UI: You have provided an out-of-range value `\".concat(value, \"` for the select \").concat(name ? \"(name=\\\"\".concat(name, \"\\\") \") : '', \"component.\"), \"Consider providing a value that matches one of the available options or ''.\", \"The available values are \".concat(values.filter(function (x) {\n          return x != null;\n        }).map(function (x) {\n          return \"`\".concat(x, \"`\");\n        }).join(', ') || '\"\"', \".\")].join('\\n'));\n      }\n    }, [foundMatch, childrenArray, multiple, name, value]);\n  }\n\n  if (computeDisplay) {\n    display = multiple ? displayMultiple.join(', ') : displaySingle;\n  } // Avoid performing a layout computation in the render method.\n\n\n  var menuMinWidth = menuMinWidthState;\n\n  if (!autoWidth && isOpenControlled && displayNode) {\n    menuMinWidth = displayNode.clientWidth;\n  }\n\n  var tabIndex;\n\n  if (typeof tabIndexProp !== 'undefined') {\n    tabIndex = tabIndexProp;\n  } else {\n    tabIndex = disabled ? null : 0;\n  }\n\n  var buttonId = SelectDisplayProps.id || (name ? \"mui-component-select-\".concat(name) : undefined);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, // TODO v5: merge root and select\n    classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),\n    ref: setDisplayNode,\n    tabIndex: tabIndex,\n    role: \"button\",\n    \"aria-disabled\": disabled ? 'true' : undefined,\n    \"aria-expanded\": open ? 'true' : undefined,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": [labelId, buttonId].filter(Boolean).join(' ') || undefined,\n    onKeyDown: handleKeyDown,\n    onMouseDown: disabled || readOnly ? null : handleMouseDown,\n    onBlur: handleBlur,\n    onFocus: onFocus\n  }, SelectDisplayProps, {\n    // The id is required for proper a11y\n    id: buttonId\n  }), isEmpty(display) ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : display), /*#__PURE__*/React.createElement(\"input\", _extends({\n    value: Array.isArray(value) ? value.join(',') : value,\n    name: name,\n    ref: inputRef,\n    \"aria-hidden\": true,\n    onChange: handleChange,\n    tabIndex: -1,\n    className: classes.nativeInput,\n    autoFocus: autoFocus\n  }, other)), /*#__PURE__*/React.createElement(IconComponent, {\n    className: clsx(classes.icon, classes[\"icon\".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)\n  }), /*#__PURE__*/React.createElement(Menu, _extends({\n    id: \"menu-\".concat(name || ''),\n    anchorEl: displayNode,\n    open: open,\n    onClose: handleClose\n  }, MenuProps, {\n    MenuListProps: _extends({\n      'aria-labelledby': labelId,\n      role: 'listbox',\n      disableListWrap: true\n    }, MenuProps.MenuListProps),\n    PaperProps: _extends({}, MenuProps.PaperProps, {\n      style: _extends({\n        minWidth: menuMinWidth\n      }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n    })\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectInput.propTypes = {\n  /**\r\n   * @ignore\r\n   */\n  'aria-label': PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\r\n   * If `true`, the width of the popover will automatically be set according to the items inside the\r\n   * menu, otherwise it will be at least the width of the select input.\r\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\r\n   * The option elements to populate the select with.\r\n   * Can be some `<MenuItem>` elements.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\r\n   * The CSS class name of the select element.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The default element value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the select will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the selected item is displayed even if its value is empty.\r\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\r\n   * The icon that displays the arrow.\r\n   */\n  IconComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`\r\n   * Equivalent to `ref`\r\n   */\n  inputRef: refType,\n\n  /**\r\n   * The ID of an element that acts as an additional label. The Select will\r\n   * be labelled by the additional label and the selected value.\r\n   */\n  labelId: PropTypes.string,\n\n  /**\r\n   * Props applied to the [`Menu`](/api/menu/) element.\r\n   */\n  MenuProps: PropTypes.object,\n\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   */\n  multiple: PropTypes.bool,\n\n  /**\r\n   * Name attribute of the `select` or hidden `input` element.\r\n   */\n  name: PropTypes.string,\n\n  /**\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Callback function fired when a menu item is selected.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (any).\r\n   * @param {object} [child] The react element that was selected.\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * Control `select` open state.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * @ignore\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Render the selected value.\r\n   *\r\n   * @param {any} value The `value` provided to the component.\r\n   * @returns {ReactNode}\r\n   */\n  renderValue: PropTypes.func,\n\n  /**\r\n   * Props applied to the clickable div element.\r\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\r\n   * @ignore\r\n   */\n  type: PropTypes.any,\n\n  /**\r\n   * The input value.\r\n   */\n  value: PropTypes.any,\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default SelectInput;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/React.createElement(Input, null);\n\nvar _ref2 = /*#__PURE__*/React.createElement(FilledInput, null);\n\nvar Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      id = props.id,\n      input = props.input,\n      inputProps = props.inputProps,\n      label = props.label,\n      labelId = props.labelId,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/React.createElement(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {\n      id: id\n    } : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      labelId: labelId,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: _extends({\n        id: id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, the width of the popover will automatically be set according to the items inside the\r\n   * menu, otherwise it will be at least the width of the select input.\r\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\r\n   * The option elements to populate the select with.\r\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\r\n   *\r\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * The default element value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, a value is displayed even if no items are selected.\r\n   *\r\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\r\n   * The icon that displays the arrow.\r\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\r\n   * The `id` of the wrapper element or the `select` element when `native`.\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * An `Input` element; does not have to be a material-ui specific `Input`.\r\n   */\n  input: PropTypes.element,\n\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   * When `native` is `true`, the attributes are applied on the `select` element.\r\n   */\n  inputProps: PropTypes.object,\n\n  /**\r\n   * See [OutlinedInput#label](/api/outlined-input/#props)\r\n   */\n  label: PropTypes.node,\n\n  /**\r\n   * The ID of an element that acts as an additional label. The Select will\r\n   * be labelled by the additional label and the selected value.\r\n   */\n  labelId: PropTypes.string,\n\n  /**\r\n   * See [OutlinedInput#label](/api/outlined-input/#props)\r\n   */\n  labelWidth: PropTypes.number,\n\n  /**\r\n   * Props applied to the [`Menu`](/api/menu/) element.\r\n   */\n  MenuProps: PropTypes.object,\n\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   */\n  multiple: PropTypes.bool,\n\n  /**\r\n   * If `true`, the component will be using a native `select` element.\r\n   */\n  native: PropTypes.bool,\n\n  /**\r\n   * Callback function fired when a menu item is selected.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (any).\r\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * Control `select` open state.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * Render the selected value.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   *\r\n   * @param {any} value The `value` provided to the component.\r\n   * @returns {ReactNode}\r\n   */\n  renderValue: PropTypes.func,\n\n  /**\r\n   * Props applied to the clickable div element.\r\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\r\n   * The input value. Providing an empty string will select no options.\r\n   * This prop is required when the `native` prop is `false` (default).\r\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\r\n   *\r\n   * If the value is an object it must have reference equality with the option in order to be selected.\r\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\r\n   */\n  value: PropTypes.any,\n\n  /**\r\n   * The variant to use.\r\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"],"sourceRoot":""}