{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/FormControl/FormControl.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/FormControl/FormControlContext.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/FormControl/formControlState.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/FormControl/useFormControl.js"],"names":[],"mappings":"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","file":"js/vendors/material-ui/core/formcontrol.eca1f3eb3fb0367fe4a9.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { isFilled, isAdornedStart } from '../InputBase/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport isMuiElement from '../utils/isMuiElement';\nimport FormControlContext from './FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'inline-flex',\n    flexDirection: 'column',\n    position: 'relative',\n    // Reset fieldset default style.\n    minWidth: 0,\n    padding: 0,\n    margin: 0,\n    border: 0,\n    verticalAlign: 'top' // Fix alignment issue on Safari.\n\n  },\n\n  /* Styles applied to the root element if `margin=\"normal\"`. */\n  marginNormal: {\n    marginTop: 16,\n    marginBottom: 8\n  },\n\n  /* Styles applied to the root element if `margin=\"dense\"`. */\n  marginDense: {\n    marginTop: 8,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  }\n};\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n *  - FormLabel\n *  - FormHelperText\n *  - Input\n *  - InputLabel\n *\n * You can find one composition example below and more going to [the demos](/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️Only one input can be used within a FormControl.\n */\n\nvar FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$error = props.error,\n      error = _props$error === void 0 ? false : _props$error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      visuallyFocused = props.focused,\n      _props$hiddenLabel = props.hiddenLabel,\n      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,\n      _props$margin = props.margin,\n      margin = _props$margin === void 0 ? 'none' : _props$margin,\n      _props$required = props.required,\n      required = _props$required === void 0 ? false : _props$required,\n      size = props.size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"fullWidth\", \"focused\", \"hiddenLabel\", \"margin\", \"required\", \"size\", \"variant\"]);\n\n  var _React$useState = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialAdornedStart = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        var input = isMuiElement(child, ['Select']) ? child.props.input : child;\n\n        if (input && isAdornedStart(input.props)) {\n          initialAdornedStart = true;\n        }\n      });\n    }\n\n    return initialAdornedStart;\n  }),\n      adornedStart = _React$useState[0],\n      setAdornedStart = _React$useState[1];\n\n  var _React$useState2 = React.useState(function () {\n    // We need to iterate through the children and find the Input in order\n    // to fully support server-side rendering.\n    var initialFilled = false;\n\n    if (children) {\n      React.Children.forEach(children, function (child) {\n        if (!isMuiElement(child, ['Input', 'Select'])) {\n          return;\n        }\n\n        if (isFilled(child.props, true)) {\n          initialFilled = true;\n        }\n      });\n    }\n\n    return initialFilled;\n  }),\n      filled = _React$useState2[0],\n      setFilled = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _focused = _React$useState3[0],\n      setFocused = _React$useState3[1];\n\n  var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;\n\n  if (disabled && focused) {\n    setFocused(false);\n  }\n\n  var registerEffect;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var registeredInput = React.useRef(false);\n\n    registerEffect = function registerEffect() {\n      if (registeredInput.current) {\n        console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return function () {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  var onFilled = React.useCallback(function () {\n    setFilled(true);\n  }, []);\n  var onEmpty = React.useCallback(function () {\n    setFilled(false);\n  }, []);\n  var childContext = {\n    adornedStart: adornedStart,\n    setAdornedStart: setAdornedStart,\n    color: color,\n    disabled: disabled,\n    error: error,\n    filled: filled,\n    focused: focused,\n    fullWidth: fullWidth,\n    hiddenLabel: hiddenLabel,\n    margin: (size === 'small' ? 'dense' : undefined) || margin,\n    onBlur: function onBlur() {\n      setFocused(false);\n    },\n    onEmpty: onEmpty,\n    onFilled: onFilled,\n    onFocus: function onFocus() {\n      setFocused(true);\n    },\n    registerEffect: registerEffect,\n    required: required,\n    variant: variant\n  };\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: childContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, margin !== 'none' && classes[\"margin\".concat(capitalize(margin))], fullWidth && classes.fullWidth),\n    ref: ref\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControl.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The contents of the form control.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be displayed in focused state.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the component will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   */\n  hiddenLabel: PropTypes.bool,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: PropTypes.oneOf(['dense', 'none', 'normal']),\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the text field.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormControl'\n})(FormControl);","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar FormControlContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\n\nexport function useFormControl() {\n  return React.useContext(FormControlContext);\n}\nexport default FormControlContext;","export default function formControlState(_ref) {\n  var props = _ref.props,\n      states = _ref.states,\n      muiFormControl = _ref.muiFormControl;\n  return states.reduce(function (acc, state) {\n    acc[state] = props[state];\n\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n\n    return acc;\n  }, {});\n}","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}"],"sourceRoot":""}