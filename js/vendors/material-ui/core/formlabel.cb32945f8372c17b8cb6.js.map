{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/FormLabel/FormLabel.js"],"names":[],"mappings":"qPASW,EAAS,SAAgB,EAAO,CACzC,MAAO,CAEL,KAAM,QAAS,CACb,MAAO,EAAM,QAAQ,KAAK,WACzB,EAAM,WAAW,MAAO,CACzB,WAAY,EACZ,QAAS,EACT,YAAa,CACX,MAAO,EAAM,QAAQ,QAAQ,MAE/B,aAAc,CACZ,MAAO,EAAM,QAAQ,KAAK,UAE5B,UAAW,CACT,MAAO,EAAM,QAAQ,MAAM,QAK/B,eAAgB,CACd,YAAa,CACX,MAAO,EAAM,QAAQ,UAAU,OAKnC,QAAS,GAGT,SAAU,GAGV,MAAO,GAGP,OAAQ,GAGR,SAAU,GAGV,SAAU,CACR,UAAW,CACT,MAAO,EAAM,QAAQ,MAAM,SAK/B,EAAyB,aAAiB,SAAmB,EAAO,EAAK,CAC3E,GAAI,GAAW,EAAM,SACjB,EAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAQ,EAAM,MACd,EAAmB,EAAM,UACzB,EAAY,IAAqB,OAAS,QAAU,EACpD,EAAW,EAAM,SACjB,EAAQ,EAAM,MACd,EAAS,EAAM,OACf,EAAU,EAAM,QAChB,EAAW,EAAM,SACjB,EAAQ,QAAyB,EAAO,CAAC,WAAY,UAAW,YAAa,QAAS,YAAa,WAAY,QAAS,SAAU,UAAW,aAE7I,EAAiB,UACjB,EAAM,QAAiB,CACzB,QACA,iBACA,OAAQ,CAAC,QAAS,WAAY,UAAW,WAAY,QAAS,YAEhE,MAAoB,iBAAoB,EAAW,QAAS,CAC1D,UAAW,cAAK,EAAQ,KAAM,EAAQ,QAAQ,OAAO,QAAW,EAAI,OAAS,aAAc,EAAW,EAAI,UAAY,EAAQ,SAAU,EAAI,OAAS,EAAQ,MAAO,EAAI,QAAU,EAAQ,OAAQ,EAAI,SAAW,EAAQ,QAAS,EAAI,UAAY,EAAQ,UAC1P,OACC,GAAQ,EAAU,EAAI,UAAyB,gBAAoB,OAAQ,CAC5E,cAAe,GACf,UAAW,cAAK,EAAQ,SAAU,EAAI,OAAS,EAAQ,QACtD,SAAU,QA8Df,QAAe,QAAW,EAAQ,CAChC,KAAM,iBACL","file":"js/vendors/material-ui/core/formlabel.cb32945f8372c17b8cb6.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.body1, {\n      lineHeight: 1,\n      padding: 0,\n      '&$focused': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused': {\n        color: theme.palette.secondary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Styles applied to the asterisk element. */\n    asterisk: {\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }\n  };\n};\nvar FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'label' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      required = props.required,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The color of the component. It supports those theme colors that make sense for this component.\r\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\r\n   * If `true`, the label should be displayed in a disabled state.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label should be displayed in an error state.\r\n   */\n  error: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label should use filled classes key.\r\n   */\n  filled: PropTypes.bool,\n\n  /**\r\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\r\n   */\n  focused: PropTypes.bool,\n\n  /**\r\n   * If `true`, the label will indicate that the input is required.\r\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);"],"sourceRoot":""}