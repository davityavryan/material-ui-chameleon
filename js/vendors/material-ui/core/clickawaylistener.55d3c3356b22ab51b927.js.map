{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/ClickAwayListener/ClickAwayListener.js"],"names":[],"mappings":"kNAQA,WAA6B,EAAW,CACtC,MAAO,GAAU,UAAU,GAAG,cAGhC,WAA8B,EAAO,CACnC,MAAO,UAAS,gBAAgB,YAAc,EAAM,SAAW,SAAS,gBAAgB,aAAe,EAAM,QAQ/G,WAA2B,EAAO,CAChC,GAAI,GAAW,EAAM,SACjB,EAAwB,EAAM,iBAC9B,EAAmB,IAA0B,OAAS,GAAQ,EAC9D,EAAoB,EAAM,WAC1B,EAAa,IAAsB,OAAS,UAAY,EACxD,EAAc,EAAM,YACpB,EAAoB,EAAM,WAC1B,EAAa,IAAsB,OAAS,aAAe,EAC3D,EAAW,SAAa,IACxB,EAAU,SAAa,MACvB,EAAe,SAAa,IAC5B,EAAoB,SAAa,IACrC,YAAgB,UAAY,CAG1B,kBAAW,UAAY,CACrB,EAAa,QAAU,IACtB,GACI,UAAY,CACjB,EAAa,QAAU,KAExB,IAEH,GAAI,GAAe,cAAkB,SAAU,EAAU,CAEvD,EAAQ,QAAU,cAAqB,IACtC,IACC,EAAY,QAAW,EAAS,IAAK,GAOrC,EAAkB,QAAiB,SAAU,EAAO,CAGtD,GAAI,GAAkB,EAAkB,QAKxC,GAJA,EAAkB,QAAU,GAIxB,GAAC,EAAa,SAAW,CAAC,EAAQ,SAAW,EAAqB,IAKtE,IAAI,EAAS,QAAS,CACpB,EAAS,QAAU,GACnB,OAGF,GAAI,GAEJ,GAAI,EAAM,aACR,EAAY,EAAM,eAAe,QAAQ,EAAQ,SAAW,OACvD,CAEL,GAAI,GAAM,QAAc,EAAQ,SAChC,EAAY,CAAC,EAAI,gBAAgB,SAAS,EAAM,SAAW,EAAQ,QAAQ,SAAS,EAAM,QAGxF,CAAC,GAAc,IAAoB,CAAC,IACtC,EAAY,MAIZ,EAAwB,SAA+B,EAAa,CACtE,MAAO,UAAU,EAAO,CACtB,EAAkB,QAAU,GAC5B,GAAI,GAAuB,EAAS,MAAM,GAEtC,GACF,EAAqB,KAKvB,EAAgB,CAClB,IAAK,GAGP,MAAI,KAAe,IACjB,GAAc,GAAc,EAAsB,IAGpD,YAAgB,UAAY,CAC1B,GAAI,IAAe,GAAO,CACxB,GAAI,GAAmB,EAAoB,GACvC,EAAM,QAAc,EAAQ,SAE5B,EAAkB,UAA2B,CAC/C,EAAS,QAAU,IAGrB,SAAI,iBAAiB,EAAkB,GACvC,EAAI,iBAAiB,YAAa,GAC3B,UAAY,CACjB,EAAI,oBAAoB,EAAkB,GAC1C,EAAI,oBAAoB,YAAa,MAKxC,CAAC,EAAiB,IAEjB,IAAe,IACjB,GAAc,GAAc,EAAsB,IAGpD,YAAgB,UAAY,CAC1B,GAAI,IAAe,GAAO,CACxB,GAAI,GAAmB,EAAoB,GACvC,EAAM,QAAc,EAAQ,SAChC,SAAI,iBAAiB,EAAkB,GAChC,UAAY,CACjB,EAAI,oBAAoB,EAAkB,MAK7C,CAAC,EAAiB,IACD,gBAAoB,WAAgB,KAAmB,eAAmB,EAAU,IAyC1G,QAAe","file":"js/vendors/material-ui/core/clickawaylistener.55d3c3356b22ab51b927.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\n}\n/**\r\n * Listen for click events that occur somewhere in the document, outside of the element itself.\r\n * For instance, if you need to hide a menu when people click anywhere else on your page.\r\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var activatedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(function () {\n      activatedRef.current = true;\n    }, 0);\n    return function () {\n      activatedRef.current = false;\n    };\n  }, []); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(function (instance) {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      var doc = ownerDocument(nodeRef.current);\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The wrapped element.\r\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\r\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\r\n   * This prop changes how portaled elements are handled.\r\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\r\n   * The mouse event to listen to. You can disable the listener by providing `false`.\r\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\r\n   * Callback fired when a \"click away\" event is detected.\r\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\r\n   * The touch event to listen to. You can disable the listener by providing `false`.\r\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;"],"sourceRoot":""}