{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Select/index.js","webpack:///./node_modules/@material-ui/core/esm/Select/Select.js","webpack:///./node_modules/@material-ui/core/esm/Select/SelectInput.js"],"names":["styles","nativeSelectStyles","_ref","React","createElement","Input","_ref2","FilledInput","Select","forwardRef","props","ref","_props$autoWidth","autoWidth","children","classes","_props$displayEmpty","displayEmpty","_props$IconComponent","IconComponent","ArrowDropDownIcon","id","input","inputProps","label","labelId","_props$labelWidth","labelWidth","MenuProps","_props$multiple","multiple","_props$native","native","onClose","onOpen","open","renderValue","SelectDisplayProps","_props$variant","variant","variantProps","other","inputComponent","NativeSelectInput","SelectInput","muiFormControl","states","InputComponent","standard","outlined","OutlinedInput","filled","cloneElement","type","undefined","mergeClasses","baseClasses","newClasses","Component","muiName","name","areEqualValues","a","b","String","ariaLabel","autoFocus","className","defaultValue","disabled","inputRefProp","inputRef","_props$MenuProps","onBlur","onChange","onFocus","openProp","readOnly","_props$SelectDisplayP","required","tabIndexProp","tabIndex","valueProp","value","_useControlled","controlled","default","_useControlled2","setValue","useRef","_React$useState","useState","displayNode","setDisplayNode","isOpenControlled","current","_React$useState2","menuMinWidthState","setMenuMinWidthState","_React$useState3","openState","setOpenState","handleRef","useImperativeHandle","focus","node","useEffect","display","displaySingle","update","event","clientWidth","handleItemClick","child","newValue","Array","isArray","itemIndex","indexOf","push","splice","persist","Object","defineProperty","writable","displayMultiple","computeDisplay","isFilled","items","Children","map","isValidElement","selected","Error","some","v","onClick","onKeyUp","key","preventDefault","role","join","menuMinWidth","buttonId","concat","Fragment","root","select","selectMenu","filter","Boolean","onKeyDown","onMouseDown","button","trim","isEmpty","dangerouslySetInnerHTML","__html","icon","iconOpen","Menu","anchorEl","MenuListProps","disableListWrap","PaperProps","style","minWidth"],"mappings":"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","file":"js/vendors/material-ui/core/select-35d94ed387a9d1946903.js","sourcesContent":["export { default } from './Select';","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/React.createElement(Input, null);\n\nvar _ref2 = /*#__PURE__*/React.createElement(FilledInput, null);\n\nvar Select = React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      id = props.id,\n      input = props.input,\n      inputProps = props.inputProps,\n      label = props.label,\n      labelId = props.labelId,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/React.createElement(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {\n      id: id\n    } : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      labelId: labelId,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: _extends({\n        id: id\n      }, SelectDisplayProps)\n    }, {}, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` elment when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport { refType } from '@material-ui/utils';\nimport Menu from '../Menu/Menu';\nimport { isFilled } from '../InputBase/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\n\nfunction areEqualValues(a, b) {\n  if (_typeof(b) === 'object' && b !== null) {\n    return a === b;\n  }\n\n  return String(a) === String(b);\n}\n\nfunction isEmpty(display) {\n  return display == null || typeof display === 'string' && !display.trim();\n}\n/**\n * @ignore - internal component.\n */\n\n\nvar SelectInput = React.forwardRef(function SelectInput(props, ref) {\n  var ariaLabel = props['aria-label'],\n      autoFocus = props.autoFocus,\n      autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      inputRefProp = props.inputRef,\n      labelId = props.labelId,\n      _props$MenuProps = props.MenuProps,\n      MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,\n      multiple = props.multiple,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onFocus = props.onFocus,\n      onOpen = props.onOpen,\n      openProp = props.open,\n      readOnly = props.readOnly,\n      renderValue = props.renderValue,\n      required = props.required,\n      _props$SelectDisplayP = props.SelectDisplayProps,\n      SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,\n      tabIndexProp = props.tabIndex,\n      type = props.type,\n      valueProp = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"aria-label\", \"autoFocus\", \"autoWidth\", \"children\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"displayEmpty\", \"IconComponent\", \"inputRef\", \"labelId\", \"MenuProps\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onOpen\", \"open\", \"readOnly\", \"renderValue\", \"required\", \"SelectDisplayProps\", \"tabIndex\", \"type\", \"value\", \"variant\"]);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'SelectInput'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      displayNode = _React$useState[0],\n      setDisplayNode = _React$useState[1];\n\n  var _React$useRef = React.useRef(openProp != null),\n      isOpenControlled = _React$useRef.current;\n\n  var _React$useState2 = React.useState(),\n      menuMinWidthState = _React$useState2[0],\n      setMenuMinWidthState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      openState = _React$useState3[0],\n      setOpenState = _React$useState3[1];\n\n  var handleRef = useForkRef(ref, inputRefProp);\n  React.useImperativeHandle(handleRef, function () {\n    return {\n      focus: function focus() {\n        displayNode.focus();\n      },\n      node: inputRef.current,\n      value: value\n    };\n  }, [displayNode, value]);\n  React.useEffect(function () {\n    if (autoFocus && displayNode) {\n      displayNode.focus();\n    }\n  }, [autoFocus, displayNode]);\n\n  var update = function update(open, event) {\n    if (open) {\n      if (onOpen) {\n        onOpen(event);\n      }\n    } else if (onClose) {\n      onClose(event);\n    }\n\n    if (!isOpenControlled) {\n      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);\n      setOpenState(open);\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(event) {\n    // Ignore everything but left-click\n    if (event.button !== 0) {\n      return;\n    } // Hijack the default focus behavior.\n\n\n    event.preventDefault();\n    displayNode.focus();\n    update(true, event);\n  };\n\n  var handleClose = function handleClose(event) {\n    update(false, event);\n  };\n\n  var handleItemClick = function handleItemClick(child) {\n    return function (event) {\n      if (!multiple) {\n        update(false, event);\n      }\n\n      var newValue;\n\n      if (multiple) {\n        newValue = Array.isArray(value) ? _toConsumableArray(value) : [];\n        var itemIndex = value.indexOf(child.props.value);\n\n        if (itemIndex === -1) {\n          newValue.push(child.props.value);\n        } else {\n          newValue.splice(itemIndex, 1);\n        }\n      } else {\n        newValue = child.props.value;\n      }\n\n      if (value === newValue) {\n        return;\n      }\n\n      setValue(newValue);\n\n      if (onChange) {\n        event.persist(); // Preact support, target is read only property on a native event.\n\n        Object.defineProperty(event, 'target', {\n          writable: true,\n          value: {\n            value: newValue,\n            name: name\n          }\n        });\n        onChange(event, child);\n      }\n    };\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (!readOnly) {\n      var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      'Enter'];\n\n      if (validKeys.indexOf(event.key) !== -1) {\n        event.preventDefault();\n        update(true, event);\n      }\n    }\n  };\n\n  var open = displayNode !== null && (isOpenControlled ? openProp : openState);\n\n  var handleBlur = function handleBlur(event) {\n    // if open event.stopImmediatePropagation\n    if (!open && onBlur) {\n      event.persist(); // Preact support, target is read only property on a native event.\n\n      Object.defineProperty(event, 'target', {\n        writable: true,\n        value: {\n          value: value,\n          name: name\n        }\n      });\n      onBlur(event);\n    }\n  };\n\n  delete other['aria-invalid'];\n  var display;\n  var displaySingle;\n  var displayMultiple = [];\n  var computeDisplay = false;\n  var foundMatch = false; // No need to display any value if the field is empty.\n\n  if (isFilled({\n    value: value\n  }) || displayEmpty) {\n    if (renderValue) {\n      display = renderValue(value);\n    } else {\n      computeDisplay = true;\n    }\n  }\n\n  var items = React.Children.map(children, function (child) {\n    if (!React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the Select component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    var selected;\n\n    if (multiple) {\n      if (!Array.isArray(value)) {\n        throw new Error('Material-UI: the `value` prop must be an array ' + 'when using the `Select` component with `multiple`.');\n      }\n\n      selected = value.some(function (v) {\n        return areEqualValues(v, child.props.value);\n      });\n\n      if (selected && computeDisplay) {\n        displayMultiple.push(child.props.children);\n      }\n    } else {\n      selected = areEqualValues(value, child.props.value);\n\n      if (selected && computeDisplay) {\n        displaySingle = child.props.children;\n      }\n    }\n\n    if (selected) {\n      foundMatch = true;\n    }\n\n    return React.cloneElement(child, {\n      'aria-selected': selected ? 'true' : undefined,\n      onClick: handleItemClick(child),\n      onKeyUp: function onKeyUp(event) {\n        if (event.key === ' ') {\n          // otherwise our MenuItems dispatches a click event\n          // it's not behavior of the native <option> and causes\n          // the select to close immediately since we open on space keydown\n          event.preventDefault();\n        }\n\n        var onKeyUp = child.props.onKeyUp;\n\n        if (typeof onKeyUp === 'function') {\n          onKeyUp(event);\n        }\n      },\n      role: 'option',\n      selected: selected,\n      value: undefined,\n      // The value is most likely not a valid HTML attribute.\n      'data-value': child.props.value // Instead, we provide it as a data attribute.\n\n    });\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (!foundMatch && !multiple && value !== '') {\n        var values = React.Children.toArray(children).map(function (child) {\n          return child.props.value;\n        });\n        console.warn([\"Material-UI: you have provided an out-of-range value `\".concat(value, \"` for the select \").concat(name ? \"(name=\\\"\".concat(name, \"\\\") \") : '', \"component.\"), \"Consider providing a value that matches one of the available options or ''.\", \"The available values are \".concat(values.filter(function (x) {\n          return x != null;\n        }).map(function (x) {\n          return \"`\".concat(x, \"`\");\n        }).join(', ') || '\"\"', \".\")].join('\\n'));\n      }\n    }, [foundMatch, children, multiple, name, value]);\n  }\n\n  if (computeDisplay) {\n    display = multiple ? displayMultiple.join(', ') : displaySingle;\n  } // Avoid performing a layout computation in the render method.\n\n\n  var menuMinWidth = menuMinWidthState;\n\n  if (!autoWidth && isOpenControlled && displayNode) {\n    menuMinWidth = displayNode.clientWidth;\n  }\n\n  var tabIndex;\n\n  if (typeof tabIndexProp !== 'undefined') {\n    tabIndex = tabIndexProp;\n  } else {\n    tabIndex = disabled ? null : 0;\n  }\n\n  var buttonId = SelectDisplayProps.id || (name ? \"mui-component-select-\".concat(name) : undefined);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, // TODO v5: merge root and select\n    classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),\n    ref: setDisplayNode,\n    tabIndex: tabIndex,\n    role: \"button\",\n    \"aria-disabled\": disabled ? 'true' : undefined,\n    \"aria-expanded\": open ? 'true' : undefined,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": [labelId, buttonId].filter(Boolean).join(' ') || undefined,\n    onKeyDown: handleKeyDown,\n    onMouseDown: disabled || readOnly ? null : handleMouseDown,\n    onBlur: handleBlur,\n    onFocus: onFocus\n  }, SelectDisplayProps, {\n    // The id is required for proper a11y\n    id: buttonId\n  }), isEmpty(display) ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : display), /*#__PURE__*/React.createElement(\"input\", _extends({\n    value: Array.isArray(value) ? value.join(',') : value,\n    name: name,\n    ref: inputRef,\n    type: \"hidden\",\n    autoFocus: autoFocus\n  }, other)), /*#__PURE__*/React.createElement(IconComponent, {\n    className: clsx(classes.icon, classes[\"icon\".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)\n  }), /*#__PURE__*/React.createElement(Menu, _extends({\n    id: \"menu-\".concat(name || ''),\n    anchorEl: displayNode,\n    open: open,\n    onClose: handleClose\n  }, MenuProps, {\n    MenuListProps: _extends({\n      'aria-labelledby': labelId,\n      role: 'listbox',\n      disableListWrap: true\n    }, MenuProps.MenuListProps),\n    PaperProps: _extends({}, MenuProps.PaperProps, {\n      style: _extends({\n        minWidth: menuMinWidth\n      }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n    })\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectInput.propTypes = {\n  /**\n   * @ignore\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<MenuItem>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the select element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`\n   * Equivalent to `ref`\n   */\n  inputRef: refType,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.any,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default SelectInput;"],"sourceRoot":""}