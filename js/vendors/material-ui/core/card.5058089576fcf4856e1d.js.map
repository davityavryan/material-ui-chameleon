{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Card/Card.js"],"names":[],"mappings":"8NAOW,EAAS,CAElB,KAAM,CACJ,SAAU,WAGV,EAAoB,aAAiB,SAAc,EAAO,EAAK,CACjE,GAAI,GAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAgB,EAAM,OACtB,EAAS,IAAkB,OAAS,GAAQ,EAC5C,EAAQ,QAAyB,EAAO,CAAC,UAAW,YAAa,WAErE,MAAoB,iBAAoB,IAAO,QAAS,CACtD,UAAW,cAAK,EAAQ,KAAM,GAC9B,UAAW,EAAS,EAAI,EACxB,OACC,MA6BL,QAAe,QAAW,EAAQ,CAChC,KAAM,YACL","file":"js/vendors/material-ui/core/card.5058089576fcf4856e1d.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, the card will use raised styling.\r\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);"],"sourceRoot":""}