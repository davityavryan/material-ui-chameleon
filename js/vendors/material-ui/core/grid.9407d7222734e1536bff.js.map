{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Grid/Grid.js"],"names":[],"mappings":"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","file":"js/vendors/material-ui/core/grid.9407d7222734e1536bff.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport requirePropFactory from '../utils/requirePropFactory';\nvar SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nfunction generateGrid(globalStyles, theme, breakpoint) {\n  var styles = {};\n  GRID_SIZES.forEach(function (size) {\n    var key = \"grid-\".concat(breakpoint, \"-\").concat(size);\n\n    if (size === true) {\n      // For the auto layouting\n      styles[key] = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n      return;\n    }\n\n    if (size === 'auto') {\n      styles[key] = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        maxWidth: 'none'\n      };\n      return;\n    } // Keep 7 significant numbers.\n\n\n    var width = \"\".concat(Math.round(size / 12 * 10e7) / 10e5, \"%\"); // Close to the bootstrap implementation:\n    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n    styles[key] = {\n      flexBasis: width,\n      flexGrow: 0,\n      maxWidth: width\n    };\n  }); // No need for a media query for the first size.\n\n  if (breakpoint === 'xs') {\n    _extends(globalStyles, styles);\n  } else {\n    globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n  }\n}\n\nfunction getOffset(val) {\n  var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var parse = parseFloat(val);\n  return \"\".concat(parse / div).concat(String(val).replace(String(parse), '') || 'px');\n}\n\nfunction generateGutter(theme, breakpoint) {\n  var styles = {};\n  SPACINGS.forEach(function (spacing) {\n    var themeSpacing = theme.spacing(spacing);\n\n    if (themeSpacing === 0) {\n      return;\n    }\n\n    styles[\"spacing-\".concat(breakpoint, \"-\").concat(spacing)] = {\n      margin: \"-\".concat(getOffset(themeSpacing, 2)),\n      width: \"calc(100% + \".concat(getOffset(themeSpacing), \")\"),\n      '& > $item': {\n        padding: getOffset(themeSpacing, 2)\n      }\n    };\n  });\n  return styles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\n\nexport var styles = function styles(theme) {\n  return _extends({\n    /* Styles applied to the root element. */\n    root: {},\n\n    /* Styles applied to the root element if `container={true}`. */\n    container: {\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexWrap: 'wrap',\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `item={true}`. */\n    item: {\n      boxSizing: 'border-box',\n      margin: '0' // For instance, it's useful when used with a `figure` element.\n\n    },\n\n    /* Styles applied to the root element if `zeroMinWidth={true}`. */\n    zeroMinWidth: {\n      minWidth: 0\n    },\n\n    /* Styles applied to the root element if `direction=\"column\"`. */\n    'direction-xs-column': {\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the root element if `direction=\"column-reverse\"`. */\n    'direction-xs-column-reverse': {\n      flexDirection: 'column-reverse'\n    },\n\n    /* Styles applied to the root element if `direction=\"row-reverse\"`. */\n    'direction-xs-row-reverse': {\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `wrap=\"nowrap\"`. */\n    'wrap-xs-nowrap': {\n      flexWrap: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `wrap=\"reverse\"`. */\n    'wrap-xs-wrap-reverse': {\n      flexWrap: 'wrap-reverse'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"center\"`. */\n    'align-items-xs-center': {\n      alignItems: 'center'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"flex-start\"`. */\n    'align-items-xs-flex-start': {\n      alignItems: 'flex-start'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"flex-end\"`. */\n    'align-items-xs-flex-end': {\n      alignItems: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `alignItems=\"baseline\"`. */\n    'align-items-xs-baseline': {\n      alignItems: 'baseline'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"center\"`. */\n    'align-content-xs-center': {\n      alignContent: 'center'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"flex-start\"`. */\n    'align-content-xs-flex-start': {\n      alignContent: 'flex-start'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"flex-end\"`. */\n    'align-content-xs-flex-end': {\n      alignContent: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"space-between\"`. */\n    'align-content-xs-space-between': {\n      alignContent: 'space-between'\n    },\n\n    /* Styles applied to the root element if `alignContent=\"space-around\"`. */\n    'align-content-xs-space-around': {\n      alignContent: 'space-around'\n    },\n\n    /* Styles applied to the root element if `justify=\"center\"`. */\n    'justify-xs-center': {\n      justifyContent: 'center'\n    },\n\n    /* Styles applied to the root element if `justify=\"flex-end\"`. */\n    'justify-xs-flex-end': {\n      justifyContent: 'flex-end'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-between\"`. */\n    'justify-xs-space-between': {\n      justifyContent: 'space-between'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-around\"`. */\n    'justify-xs-space-around': {\n      justifyContent: 'space-around'\n    },\n\n    /* Styles applied to the root element if `justify=\"space-evenly\"`. */\n    'justify-xs-space-evenly': {\n      justifyContent: 'space-evenly'\n    }\n  }, generateGutter(theme, 'xs'), theme.breakpoints.keys.reduce(function (accumulator, key) {\n    // Use side effect over immutability for better performance.\n    generateGrid(accumulator, theme, key);\n    return accumulator;\n  }, {}));\n};\nvar Grid = /*#__PURE__*/React.forwardRef(function Grid(props, ref) {\n  var _props$alignContent = props.alignContent,\n      alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent,\n      _props$alignItems = props.alignItems,\n      alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems,\n      classes = props.classes,\n      classNameProp = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$container = props.container,\n      container = _props$container === void 0 ? false : _props$container,\n      _props$direction = props.direction,\n      direction = _props$direction === void 0 ? 'row' : _props$direction,\n      _props$item = props.item,\n      item = _props$item === void 0 ? false : _props$item,\n      _props$justify = props.justify,\n      justify = _props$justify === void 0 ? 'flex-start' : _props$justify,\n      _props$lg = props.lg,\n      lg = _props$lg === void 0 ? false : _props$lg,\n      _props$md = props.md,\n      md = _props$md === void 0 ? false : _props$md,\n      _props$sm = props.sm,\n      sm = _props$sm === void 0 ? false : _props$sm,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 0 : _props$spacing,\n      _props$wrap = props.wrap,\n      wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,\n      _props$xl = props.xl,\n      xl = _props$xl === void 0 ? false : _props$xl,\n      _props$xs = props.xs,\n      xs = _props$xs === void 0 ? false : _props$xs,\n      _props$zeroMinWidth = props.zeroMinWidth,\n      zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,\n      other = _objectWithoutProperties(props, [\"alignContent\", \"alignItems\", \"classes\", \"className\", \"component\", \"container\", \"direction\", \"item\", \"justify\", \"lg\", \"md\", \"sm\", \"spacing\", \"wrap\", \"xl\", \"xs\", \"zeroMinWidth\"]);\n\n  var className = clsx(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes[\"spacing-xs-\".concat(String(spacing))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes[\"direction-xs-\".concat(String(direction))], wrap !== 'wrap' && classes[\"wrap-xs-\".concat(String(wrap))], alignItems !== 'stretch' && classes[\"align-items-xs-\".concat(String(alignItems))], alignContent !== 'stretch' && classes[\"align-content-xs-\".concat(String(alignContent))], justify !== 'flex-start' && classes[\"justify-xs-\".concat(String(justify))], xs !== false && classes[\"grid-xs-\".concat(String(xs))], sm !== false && classes[\"grid-sm-\".concat(String(sm))], md !== false && classes[\"grid-md-\".concat(String(md))], lg !== false && classes[\"grid-lg-\".concat(String(lg))], xl !== false && classes[\"grid-xl-\".concat(String(xl))]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: className,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes = {\n  /**\n   * Defines the `align-content` style property.\n   * It's applied for all screen sizes.\n   */\n  alignContent: PropTypes.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),\n\n  /**\n   * Defines the `align-items` style property.\n   * It's applied for all screen sizes.\n   */\n  alignItems: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   */\n  direction: PropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   */\n  item: PropTypes.bool,\n\n  /**\n   * Defines the `justify-content` style property.\n   * It is applied for all screen sizes.\n   */\n  justify: PropTypes.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `lg` breakpoint and wider screens if not overridden.\n   */\n  lg: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `md` breakpoint and wider screens if not overridden.\n   */\n  md: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `sm` breakpoint and wider screens if not overridden.\n   */\n  sm: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the space between the type `item` component.\n   * It can only be used on a type `container` component.\n   */\n  spacing: PropTypes.oneOf(SPACINGS),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for the `xl` breakpoint and wider screens.\n   */\n  xl: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * Defines the number of grids the component is going to use.\n   * It's applied for all the screen sizes with the lowest priority.\n   */\n  xs: PropTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\nvar StyledGrid = withStyles(styles, {\n  name: 'MuiGrid'\n})(Grid);\n\nif (process.env.NODE_ENV !== 'production') {\n  var requireProp = requirePropFactory('Grid');\n  StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {\n    alignContent: requireProp('container'),\n    alignItems: requireProp('container'),\n    direction: requireProp('container'),\n    justify: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default StyledGrid;"],"sourceRoot":""}