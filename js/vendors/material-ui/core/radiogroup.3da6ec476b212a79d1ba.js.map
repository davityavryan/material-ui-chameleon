{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/RadioGroup/RadioGroup.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/RadioGroup/RadioGroupContext.js","webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/RadioGroup/useRadioGroup.js"],"names":[],"mappings":"gQAUI,EAA0B,aAAiB,SAAoB,EAAO,EAAK,CAC7E,GAAI,GAAU,EAAM,QAChB,EAAW,EAAM,SACjB,EAAW,EAAM,KACjB,EAAY,EAAM,MAClB,EAAW,EAAM,SACjB,EAAQ,QAAyB,EAAO,CAAC,UAAW,WAAY,OAAQ,QAAS,aAEjF,EAAU,SAAa,MAEvB,EAAiB,QAAc,CACjC,WAAY,EACZ,QAAS,EAAM,aACf,KAAM,eAEJ,EAAkB,QAAe,EAAgB,GACjD,EAAQ,EAAgB,GACxB,EAAW,EAAgB,GAE/B,sBAA0B,EAAS,UAAY,CAC7C,MAAO,CACL,MAAO,UAAiB,CACtB,GAAI,GAAQ,EAAQ,QAAQ,cAAc,gCAErC,GACH,GAAQ,EAAQ,QAAQ,cAAc,yBAGpC,GACF,EAAM,WAIX,IACH,GAAI,GAAY,QAAW,EAAK,GAE5B,EAAe,SAAsB,EAAO,CAC9C,EAAS,EAAM,OAAO,OAElB,GACF,EAAS,EAAO,EAAM,OAAO,QAI7B,EAAO,QAAM,GACjB,MAAoB,iBAAoB,aAA4B,CAClE,MAAO,CACL,OACA,SAAU,EACV,UAEY,gBAAoB,IAAW,QAAS,CACtD,KAAM,aACN,IAAK,GACJ,GAAQ,MAqCb,QAAe,G,4DChGX,EAAoB,kBAMxB,QAAe,G,uECTA,YAAyB,CACtC,MAAO,cAAiB","file":"js/vendors/material-ui/core/radiogroup.3da6ec476b212a79d1ba.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/unstable_useId';\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  var actions = props.actions,\n      children = props.children,\n      nameProp = props.name,\n      valueProp = props.value,\n      onChange = props.onChange,\n      other = _objectWithoutProperties(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  var rootRef = React.useRef(null);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: props.defaultValue,\n    name: 'RadioGroup'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  React.useImperativeHandle(actions, function () {\n    return {\n      focus: function focus() {\n        var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef.current.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      }\n    };\n  }, []);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var handleChange = function handleChange(event) {\n    setValue(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  var name = useId(nameProp);\n  return /*#__PURE__*/React.createElement(RadioGroupContext.Provider, {\n    value: {\n      name: name,\n      onChange: handleChange,\n      value: value\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, _extends({\n    role: \"radiogroup\",\n    ref: handleRef\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\n\nvar RadioGroupContext = React.createContext();\n\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\n\nexport default RadioGroupContext;","import * as React from 'react';\nimport RadioGroupContext from './RadioGroupContext';\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}"],"sourceRoot":""}