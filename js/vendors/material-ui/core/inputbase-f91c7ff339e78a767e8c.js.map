{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/InputBase/index.js","webpack:///./node_modules/@material-ui/core/esm/InputBase/utils.js","webpack:///./node_modules/@material-ui/core/esm/InputBase/InputBase.js"],"names":["hasValue","value","Array","isArray","length","obj","SSR","arguments","undefined","defaultValue","startAdornment","styles","theme","light","palette","type","placeholder","color","opacity","transition","transitions","create","duration","shorter","placeholderHidden","placeholderVisible","from","root","typography","body1","text","primary","lineHeight","boxSizing","position","cursor","display","alignItems","disabled","formControl","focused","adornedStart","adornedEnd","error","marginDense","multiline","padding","concat","paddingTop","colorSecondary","fullWidth","width","input","font","border","background","height","margin","WebkitTapHighlightColor","minWidth","animationName","outline","boxShadow","animationDuration","inputMarginDense","inputMultiline","resize","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel","useEnhancedEffect","window","React","useEffect","useLayoutEffect","InputBase","forwardRef","props","ref","ariaDescribedby","autoComplete","autoFocus","classes","className","endAdornment","_props$fullWidth","id","_props$inputComponent","inputComponent","_props$inputProps","inputProps","inputPropsProp","inputRefProp","inputRef","_props$multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","readOnly","renderSuffix","rows","rowsMax","rowsMin","_props$type","valueProp","other","isControlled","useRef","current","handleInputRefWarning","useCallback","instance","process","handleInputPropsRefProp","handleInputRefProp","handleInputRef","_React$useState","useState","setFocused","muiFormControl","useFormControl","fcs","states","onFilled","onEmpty","checkDirty","isFilled","InputComponent","TextareaAutosize","setAdornedStart","Boolean","createElement","event","currentTarget","target","focus","FormControlContext","Provider","onAnimationStart","required","hiddenLabel","element","TypeError","_len","args","_key","apply","stopPropagation"],"mappings":"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","file":"js/vendors/material-ui/core/inputbase-f91c7ff339e78a767e8c.js","sourcesContent":["export { default } from './InputBase';","// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nexport function hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0);\n} // Determine if field is empty or filled.\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\n\nexport function isFilled(obj) {\n  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n} // Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\n\nexport function isAdornedStart(obj) {\n  return obj.startAdornment;\n}","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport formControlState from '../FormControl/formControlState';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport useForkRef from '../utils/useForkRef';\nimport TextareaAutosize from '../TextareaAutosize';\nimport { isFilled } from './utils';\nexport var styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var placeholder = {\n    color: 'currentColor',\n    opacity: light ? 0.42 : 0.5,\n    transition: theme.transitions.create('opacity', {\n      duration: theme.transitions.duration.shorter\n    })\n  };\n  var placeholderHidden = {\n    opacity: '0 !important'\n  };\n  var placeholderVisible = {\n    opacity: light ? 0.42 : 0.5\n  };\n  return {\n    '@global': {\n      '@keyframes mui-auto-fill': {\n        from: {}\n      },\n      '@keyframes mui-auto-fill-cancel': {\n        from: {}\n      }\n    },\n\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body1, {\n      color: theme.palette.text.primary,\n      lineHeight: '1.1876em',\n      // Reset (19px), match the native input line-height\n      boxSizing: 'border-box',\n      // Prevent padding issue with fullWidth.\n      position: 'relative',\n      cursor: 'text',\n      display: 'inline-flex',\n      alignItems: 'center',\n      '&$disabled': {\n        color: theme.palette.text.disabled,\n        cursor: 'default'\n      }\n    }),\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {},\n\n    /* Styles applied to the root element if the component is focused. */\n    focused: {},\n\n    /* Styles applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: {},\n\n    /* Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    marginDense: {},\n\n    /* Styles applied to the root element if `multiline={true}`. */\n    multiline: {\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      '&$marginDense': {\n        paddingTop: 4 - 1\n      }\n    },\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {},\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Styles applied to the `input` element. */\n    input: {\n      font: 'inherit',\n      color: 'currentColor',\n      padding: \"\".concat(8 - 2, \"px 0 \").concat(8 - 1, \"px\"),\n      border: 0,\n      boxSizing: 'content-box',\n      background: 'none',\n      height: '1.1876em',\n      // Reset (19px), match the native input line-height\n      margin: 0,\n      // Reset for Safari\n      WebkitTapHighlightColor: 'transparent',\n      display: 'block',\n      // Make the flex item shrink with Firefox\n      minWidth: 0,\n      width: '100%',\n      // Fix IE 11 width issue\n      animationName: 'mui-auto-fill-cancel',\n      '&::-webkit-input-placeholder': placeholder,\n      '&::-moz-placeholder': placeholder,\n      // Firefox 19+\n      '&:-ms-input-placeholder': placeholder,\n      // IE 11\n      '&::-ms-input-placeholder': placeholder,\n      // Edge\n      '&:focus': {\n        outline: 0\n      },\n      // Reset Firefox invalid required input style\n      '&:invalid': {\n        boxShadow: 'none'\n      },\n      '&::-webkit-search-decoration': {\n        // Remove the padding when type=search.\n        '-webkit-appearance': 'none'\n      },\n      // Show and hide the placeholder logic\n      'label[data-shrink=false] + $formControl &': {\n        '&::-webkit-input-placeholder': placeholderHidden,\n        '&::-moz-placeholder': placeholderHidden,\n        // Firefox 19+\n        '&:-ms-input-placeholder': placeholderHidden,\n        // IE 11\n        '&::-ms-input-placeholder': placeholderHidden,\n        // Edge\n        '&:focus::-webkit-input-placeholder': placeholderVisible,\n        '&:focus::-moz-placeholder': placeholderVisible,\n        // Firefox 19+\n        '&:focus:-ms-input-placeholder': placeholderVisible,\n        // IE 11\n        '&:focus::-ms-input-placeholder': placeholderVisible // Edge\n\n      },\n      '&$disabled': {\n        opacity: 1 // Reset iOS opacity\n\n      },\n      '&:-webkit-autofill': {\n        animationDuration: '5000s',\n        animationName: 'mui-auto-fill'\n      }\n    },\n\n    /* Styles applied to the `input` element if `margin=\"dense\"`. */\n    inputMarginDense: {\n      paddingTop: 4 - 1\n    },\n\n    /* Styles applied to the `input` element if `multiline={true}`. */\n    inputMultiline: {\n      height: 'auto',\n      resize: 'none',\n      padding: 0\n    },\n\n    /* Styles applied to the `input` element if `type=\"search\"`. */\n    inputTypeSearch: {\n      // Improve type search style.\n      '-moz-appearance': 'textfield',\n      '-webkit-appearance': 'textfield'\n    },\n\n    /* Styles applied to the `input` element if `startAdornment` is provided. */\n    inputAdornedStart: {},\n\n    /* Styles applied to the `input` element if `endAdornment` is provided. */\n    inputAdornedEnd: {},\n\n    /* Styles applied to the `input` element if `hiddenLabel={true}`. */\n    inputHiddenLabel: {}\n  };\n};\nvar useEnhancedEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n */\n\nvar InputBase = React.forwardRef(function InputBase(props, ref) {\n  var ariaDescribedby = props['aria-describedby'],\n      autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      endAdornment = props.endAdornment,\n      error = props.error,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      id = props.id,\n      _props$inputComponent = props.inputComponent,\n      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,\n      _props$inputProps = props.inputProps,\n      inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputRefProp = props.inputRef,\n      margin = props.margin,\n      _props$multiline = props.multiline,\n      multiline = _props$multiline === void 0 ? false : _props$multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      placeholder = props.placeholder,\n      readOnly = props.readOnly,\n      renderSuffix = props.renderSuffix,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      rowsMin = props.rowsMin,\n      startAdornment = props.startAdornment,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"aria-describedby\", \"autoComplete\", \"autoFocus\", \"classes\", \"className\", \"color\", \"defaultValue\", \"disabled\", \"endAdornment\", \"error\", \"fullWidth\", \"id\", \"inputComponent\", \"inputProps\", \"inputRef\", \"margin\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"renderSuffix\", \"rows\", \"rowsMax\", \"rowsMin\", \"startAdornment\", \"type\", \"value\"]);\n\n  var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;\n\n  var _React$useRef = React.useRef(value != null),\n      isControlled = _React$useRef.current;\n\n  var inputRef = React.useRef();\n  var handleInputRefWarning = React.useCallback(function (instance) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (instance && !(instance instanceof HTMLInputElement) && !instance.focus) {\n        console.error(['Material-UI: you have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\\n'));\n      }\n    }\n  }, []);\n  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);\n  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);\n  var handleInputRef = useForkRef(inputRef, handleInputRefProp);\n\n  var _React$useState = React.useState(false),\n      focused = _React$useState[0],\n      setFocused = _React$useState[1];\n\n  var muiFormControl = useFormControl();\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (muiFormControl) {\n        return muiFormControl.registerEffect();\n      }\n\n      return undefined;\n    }, [muiFormControl]);\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']\n  });\n  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.\n  // We need to book keep the focused state manually.\n\n  React.useEffect(function () {\n    if (!muiFormControl && disabled && focused) {\n      setFocused(false);\n\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  }, [muiFormControl, disabled, focused, onBlur]);\n  var onFilled = muiFormControl && muiFormControl.onFilled;\n  var onEmpty = muiFormControl && muiFormControl.onEmpty;\n  var checkDirty = React.useCallback(function (obj) {\n    if (isFilled(obj)) {\n      if (onFilled) {\n        onFilled();\n      }\n    } else if (onEmpty) {\n      onEmpty();\n    }\n  }, [onFilled, onEmpty]);\n  useEnhancedEffect(function () {\n    if (isControlled) {\n      checkDirty({\n        value: value\n      });\n    }\n  }, [value, checkDirty, isControlled]);\n\n  var handleFocus = function handleFocus(event) {\n    // Fix a bug with IE 11 where the focus/blur events are triggered\n    // while the input is disabled.\n    if (fcs.disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (inputPropsProp.onFocus) {\n      inputPropsProp.onFocus(event);\n    }\n\n    if (muiFormControl && muiFormControl.onFocus) {\n      muiFormControl.onFocus(event);\n    } else {\n      setFocused(true);\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    if (inputPropsProp.onBlur) {\n      inputPropsProp.onBlur(event);\n    }\n\n    if (muiFormControl && muiFormControl.onBlur) {\n      muiFormControl.onBlur(event);\n    } else {\n      setFocused(false);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    if (!isControlled) {\n      var element = event.target || inputRef.current;\n\n      if (element == null) {\n        throw new TypeError('Material-UI: Expected valid input target. ' + 'Did you use a custom `inputComponent` and forget to forward refs? ' + 'See https://material-ui.com/r/input-component-ref-interface for more info.');\n      }\n\n      checkDirty({\n        value: element.value\n      });\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (inputPropsProp.onChange) {\n      inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));\n    } // Perform in the willUpdate\n\n\n    if (onChange) {\n      onChange.apply(void 0, [event].concat(args));\n    }\n  }; // Check the input state on mount, in case it was filled by the user\n  // or auto filled by the browser before the hydration (for SSR).\n\n\n  React.useEffect(function () {\n    checkDirty(inputRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleClick = function handleClick(event) {\n    if (inputRef.current && event.currentTarget === event.target) {\n      inputRef.current.focus();\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var InputComponent = inputComponent;\n\n  var inputProps = _extends({}, inputPropsProp, {\n    ref: handleInputRef\n  });\n\n  if (typeof InputComponent !== 'string') {\n    inputProps = _extends({\n      // Rename ref to inputRef as we don't know the\n      // provided `inputComponent` structure.\n      inputRef: handleInputRef,\n      type: type\n    }, inputProps, {\n      ref: null\n    });\n  } else if (multiline) {\n    if (rows && !rowsMax && !rowsMin) {\n      InputComponent = 'textarea';\n    } else {\n      inputProps = _extends({\n        rows: rows,\n        rowsMax: rowsMax\n      }, inputProps);\n      InputComponent = TextareaAutosize;\n    }\n  } else {\n    inputProps = _extends({\n      type: type\n    }, inputProps);\n  }\n\n  var handleAutoFill = function handleAutoFill(event) {\n    // Provide a fake value as Chrome might not let you access it for security reasons.\n    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {\n      value: 'x'\n    });\n  };\n\n  React.useEffect(function () {\n    if (muiFormControl) {\n      muiFormControl.setAdornedStart(Boolean(startAdornment));\n    }\n  }, [muiFormControl, startAdornment]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),\n    onClick: handleClick,\n    ref: ref\n  }, other), startAdornment, /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(InputComponent, _extends({\n    \"aria-invalid\": fcs.error,\n    \"aria-describedby\": ariaDescribedby,\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    disabled: fcs.disabled,\n    id: id,\n    onAnimationStart: handleAutoFill,\n    name: name,\n    placeholder: placeholder,\n    readOnly: readOnly,\n    required: fcs.required,\n    rows: rows,\n    value: value,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp\n  }, inputProps, {\n    className: clsx(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus\n  }))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {\n    startAdornment: startAdornment\n  })) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? InputBase.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete: PropTypes.string,\n\n  /**\n   * If `true`, the `input` element will be focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the `input` element will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment: PropTypes.node,\n\n  /**\n   * If `true`, the input will indicate an error. This is normally obtained via context from\n   * FormControl.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a DOM element or a component.\n   */\n  inputComponent: PropTypes.elementType,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense', 'none']),\n\n  /**\n   * If `true`, a textarea element will be rendered.\n   */\n  multiline: PropTypes.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the input is blurred.\n   *\n   * Notice that the first argument (event) might be undefined.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  renderSuffix: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  rowsMin: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment: PropTypes.node,\n\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputBase'\n})(InputBase);"],"sourceRoot":""}