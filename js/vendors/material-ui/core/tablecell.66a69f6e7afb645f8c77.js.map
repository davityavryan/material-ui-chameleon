{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/TableCell/TableCell.js"],"names":[],"mappings":"8PAWW,EAAS,SAAgB,EAAO,CACzC,MAAO,CAEL,KAAM,QAAS,GAAI,EAAM,WAAW,MAAO,CACzC,QAAS,aACT,cAAe,UAGf,aAAc;AAAA,MAAkB,OAAO,EAAM,QAAQ,OAAS,QAAU,SAAQ,SAAM,EAAM,QAAQ,QAAS,GAAI,KAAQ,SAAO,SAAM,EAAM,QAAQ,QAAS,GAAI,MACjK,UAAW,OACX,QAAS,KAIX,KAAM,CACJ,MAAO,EAAM,QAAQ,KAAK,QAC1B,WAAY,EAAM,WAAW,QAAQ,IACrC,WAAY,EAAM,WAAW,kBAI/B,KAAM,CACJ,MAAO,EAAM,QAAQ,KAAK,SAI5B,OAAQ,CACN,MAAO,EAAM,QAAQ,KAAK,UAC1B,WAAY,EAAM,WAAW,QAAQ,IACrC,SAAU,EAAM,WAAW,QAAQ,KAIrC,UAAW,CACT,QAAS,oBACT,eAAgB,CACd,aAAc,IAEhB,oBAAqB,CACnB,MAAO,GAEP,QAAS,gBACT,eAAgB,CACd,YAAa,GACb,aAAc,IAEhB,QAAS,CACP,QAAS,KAMf,gBAAiB,CACf,MAAO,GAEP,QAAS,YACT,eAAgB,CACd,YAAa,EACb,aAAc,IAKlB,YAAa,CACX,QAAS,EACT,eAAgB,CACd,QAAS,IAKb,UAAW,CACT,UAAW,QAIb,YAAa,CACX,UAAW,UAIb,WAAY,CACV,UAAW,QACX,cAAe,eAIjB,aAAc,CACZ,UAAW,WAIb,aAAc,CACZ,SAAU,SACV,IAAK,EACL,KAAM,EACN,OAAQ,EACR,gBAAiB,EAAM,QAAQ,WAAW,WAS5C,EAAyB,aAAiB,SAAmB,EAAO,EAAK,CAC3E,GAAI,GAAe,EAAM,MACrB,EAAQ,IAAiB,OAAS,UAAY,EAC9C,EAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAY,EAAM,UAClB,EAAc,EAAM,QACpB,EAAY,EAAM,MAClB,EAAW,EAAM,KACjB,EAAgB,EAAM,cACtB,EAAc,EAAM,QACpB,EAAQ,QAAyB,EAAO,CAAC,QAAS,UAAW,YAAa,YAAa,UAAW,QAAS,OAAQ,gBAAiB,YAEpI,EAAQ,aAAiB,KACzB,EAAY,aAAiB,KAC7B,EAAa,GAAa,EAAU,UAAY,OAChD,EACA,EAEA,EACF,GAAY,EACZ,EAAO,EAAa,eAAiB,QAErC,EAAY,EAAa,KAAO,KAGlC,GAAI,GAAQ,EAER,CAAC,GAAS,GACZ,GAAQ,OAGV,GAAI,GAAU,GAAgB,IAAS,EAAM,QAAU,EAAM,QAAU,UACnE,EAAO,GAAa,IAAS,EAAM,KAAO,EAAM,KAAO,UACvD,EAAU,GAAe,GAAa,EAAU,QAChD,EAAW,KAEf,MAAI,IACF,GAAW,IAAkB,MAAQ,YAAc,cAGjC,gBAAoB,EAAW,QAAS,CAC1D,MACA,UAAW,cAAK,EAAQ,KAAM,EAAQ,GAAU,EAAW,IAAU,WAAa,EAAQ,QAAQ,OAAO,QAAW,KAAU,IAAY,UAAY,EAAQ,UAAU,OAAO,QAAW,KAAY,IAAS,UAAY,EAAQ,OAAO,OAAO,QAAW,KAAS,IAAY,QAAU,GAAS,EAAM,cAAgB,EAAQ,cAClU,YAAa,EACb,OACA,SACC,MAsEL,QAAe,QAAW,EAAQ,CAChC,KAAM,iBACL","file":"js/vendors/material-ui/core/tablecell.66a69f6e7afb645f8c77.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nimport { darken, alpha, lighten } from '../styles/colorManipulator';\nimport TableContext from '../Table/TableContext';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      display: 'table-cell',\n      verticalAlign: 'inherit',\n      // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n      borderBottom: \"1px solid\\n    \".concat(theme.palette.type === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)),\n      textAlign: 'left',\n      padding: 16\n    }),\n\n    /* Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n    head: {\n      color: theme.palette.text.primary,\n      lineHeight: theme.typography.pxToRem(24),\n      fontWeight: theme.typography.fontWeightMedium\n    },\n\n    /* Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n    body: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n    footer: {\n      color: theme.palette.text.secondary,\n      lineHeight: theme.typography.pxToRem(21),\n      fontSize: theme.typography.pxToRem(12)\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      padding: '6px 24px 6px 16px',\n      '&:last-child': {\n        paddingRight: 16\n      },\n      '&$paddingCheckbox': {\n        width: 24,\n        // prevent the checkbox column from growing\n        padding: '0 12px 0 16px',\n        '&:last-child': {\n          paddingLeft: 12,\n          paddingRight: 16\n        },\n        '& > *': {\n          padding: 0\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"checkbox\"`. */\n    paddingCheckbox: {\n      width: 48,\n      // prevent the checkbox column from growing\n      padding: '0 0 0 4px',\n      '&:last-child': {\n        paddingLeft: 0,\n        paddingRight: 4\n      }\n    },\n\n    /* Styles applied to the root element if `padding=\"none\"`. */\n    paddingNone: {\n      padding: 0,\n      '&:last-child': {\n        padding: 0\n      }\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right',\n      flexDirection: 'row-reverse'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `context.table.stickyHeader={true}`. */\n    stickyHeader: {\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      backgroundColor: theme.palette.background.default\n    }\n  };\n};\n/**\r\n * The component renders a `<th>` element when the parent context is a header\r\n * or otherwise a `<td>` element.\r\n */\n\nvar TableCell = /*#__PURE__*/React.forwardRef(function TableCell(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      component = props.component,\n      paddingProp = props.padding,\n      scopeProp = props.scope,\n      sizeProp = props.size,\n      sortDirection = props.sortDirection,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"component\", \"padding\", \"scope\", \"size\", \"sortDirection\", \"variant\"]);\n\n  var table = React.useContext(TableContext);\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  var isHeadCell = tablelvl2 && tablelvl2.variant === 'head';\n  var role;\n  var Component;\n\n  if (component) {\n    Component = component;\n    role = isHeadCell ? 'columnheader' : 'cell';\n  } else {\n    Component = isHeadCell ? 'th' : 'td';\n  }\n\n  var scope = scopeProp;\n\n  if (!scope && isHeadCell) {\n    scope = 'col';\n  }\n\n  var padding = paddingProp || (table && table.padding ? table.padding : 'normal');\n  var size = sizeProp || (table && table.size ? table.size : 'medium');\n  var variant = variantProp || tablelvl2 && tablelvl2.variant;\n  var ariaSort = null;\n\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], padding !== 'normal' && classes[\"padding\".concat(capitalize(padding))], size !== 'medium' && classes[\"size\".concat(capitalize(size))], variant === 'head' && table && table.stickyHeader && classes.stickyHeader),\n    \"aria-sort\": ariaSort,\n    role: role,\n    scope: scope\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes = {\n  /**\r\n   * Set the text-align on the table cell content.\r\n   *\r\n   * Monetary or generally number fields **should be right aligned** as that allows\r\n   * you to add them up quickly in your head without having to worry about decimals.\r\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\r\n   * The table cell contents.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\r\n   * Sets the padding applied to the cell.\r\n   * By default, the Table parent component set the value (`normal`).\r\n   * `default` is deprecated, use `normal` instead.\r\n   */\n  padding: chainPropTypes(PropTypes.oneOf(['normal', 'checkbox', 'none', 'default']), function (props) {\n    if (props.padding === 'default') {\n      return new Error('Material-UI: padding=\"default\" was renamed to padding=\"normal\" for consistency.');\n    }\n\n    return null;\n  }),\n\n  /**\r\n   * Set scope attribute.\r\n   */\n  scope: PropTypes.string,\n\n  /**\r\n   * Specify the size of the cell.\r\n   * By default, the Table parent component set the value (`medium`).\r\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\r\n   * Set aria-sort direction.\r\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n\n  /**\r\n   * Specify the cell type.\r\n   * By default, the TableHead, TableBody or TableFooter parent component set the value.\r\n   */\n  variant: PropTypes.oneOf(['body', 'footer', 'head'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableCell'\n})(TableCell);"],"sourceRoot":""}