{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Select/SelectInput.js","webpack:///./node_modules/@material-ui/core/esm/Select/Select.js"],"names":["areEqualValues","a","b","_typeof","String","SelectInput","React","props","ref","ariaLabel","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRefProp","inputRef","labelId","_props$MenuProps","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","openProp","open","readOnly","renderValue","_props$SelectDisplayP","SelectDisplayProps","tabIndexProp","tabIndex","valueProp","type","value","_props$variant","variant","other","_objectWithoutProperties","_useControlled","useControlled","controlled","default","_useControlled2","_slicedToArray","setValue","_React$useState","displayNode","setDisplayNode","isOpenControlled","current","_React$useState2","menuMinWidthState","setMenuMinWidthState","_React$useState3","openState","setOpenState","handleRef","useForkRef","focus","node","label","ownerDocument","getElementById","handler","getSelection","isCollapsed","addEventListener","removeEventListener","display","displaySingle","update","event","clientWidth","childrenArray","toArray","handleItemClick","child","newValue","Array","isArray","slice","itemIndex","indexOf","push","splice","onClick","persist","Object","defineProperty","writable","displayMultiple","computeDisplay","isFilled","items","map","selected","Error","_formatMuiErrorMessage","some","v","undefined","onKeyUp","key","preventDefault","role","join","menuMinWidth","buttonId","id","concat","_extends","clsx","root","select","selectMenu","filter","Boolean","onKeyDown","onMouseDown","button","trim","isEmpty","dangerouslySetInnerHTML","__html","index","target","nativeInput","icon","capitalize","iconOpen","Menu","anchorEl","MenuListProps","disableListWrap","PaperProps","style","minWidth","styles","nativeSelectStyles","_ref","Input","_ref2","FilledInput","Select","_props$autoWidth","_props$displayEmpty","_props$IconComponent","ArrowDropDownIcon","input","inputProps","_props$labelWidth","labelWidth","_props$multiple","_props$native","native","variantProps","inputComponent","NativeSelectInput","muiFormControl","useFormControl","formControlState","states","InputComponent","standard","outlined","OutlinedInput","filled","mergeClasses","baseClasses","newClasses","Component","muiName","withStyles"],"mappings":"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","file":"js/vendors/material-ui/core/select.e0c5cb17d3d1f1e93296.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ownerDocument from '../utils/ownerDocument';\nimport capitalize from '../utils/capitalize';\nimport { refType } from '@material-ui/utils';\nimport Menu from '../Menu/Menu';\nimport { isFilled } from '../InputBase/utils';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\n\nfunction areEqualValues(a, b) {\n  if (_typeof(b) === 'object' && b !== null) {\n    return a === b;\n  }\n\n  return String(a) === String(b);\n}\n\nfunction isEmpty(display) {\n  return display == null || typeof display === 'string' && !display.trim();\n}\n/**\n * @ignore - internal component.\n */\n\n\nvar SelectInput = /*#__PURE__*/React.forwardRef(function SelectInput(props, ref) {\n  var ariaLabel = props['aria-label'],\n      autoFocus = props.autoFocus,\n      autoWidth = props.autoWidth,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      displayEmpty = props.displayEmpty,\n      IconComponent = props.IconComponent,\n      inputRefProp = props.inputRef,\n      labelId = props.labelId,\n      _props$MenuProps = props.MenuProps,\n      MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,\n      multiple = props.multiple,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onFocus = props.onFocus,\n      onOpen = props.onOpen,\n      openProp = props.open,\n      readOnly = props.readOnly,\n      renderValue = props.renderValue,\n      _props$SelectDisplayP = props.SelectDisplayProps,\n      SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,\n      tabIndexProp = props.tabIndex,\n      type = props.type,\n      valueProp = props.value,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"aria-label\", \"autoFocus\", \"autoWidth\", \"children\", \"classes\", \"className\", \"defaultValue\", \"disabled\", \"displayEmpty\", \"IconComponent\", \"inputRef\", \"labelId\", \"MenuProps\", \"multiple\", \"name\", \"onBlur\", \"onChange\", \"onClose\", \"onFocus\", \"onOpen\", \"open\", \"readOnly\", \"renderValue\", \"SelectDisplayProps\", \"tabIndex\", \"type\", \"value\", \"variant\"]);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'Select'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  var inputRef = React.useRef(null);\n\n  var _React$useState = React.useState(null),\n      displayNode = _React$useState[0],\n      setDisplayNode = _React$useState[1];\n\n  var _React$useRef = React.useRef(openProp != null),\n      isOpenControlled = _React$useRef.current;\n\n  var _React$useState2 = React.useState(),\n      menuMinWidthState = _React$useState2[0],\n      setMenuMinWidthState = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      openState = _React$useState3[0],\n      setOpenState = _React$useState3[1];\n\n  var handleRef = useForkRef(ref, inputRefProp);\n  React.useImperativeHandle(handleRef, function () {\n    return {\n      focus: function focus() {\n        displayNode.focus();\n      },\n      node: inputRef.current,\n      value: value\n    };\n  }, [displayNode, value]);\n  React.useEffect(function () {\n    if (autoFocus && displayNode) {\n      displayNode.focus();\n    }\n  }, [autoFocus, displayNode]);\n  React.useEffect(function () {\n    if (displayNode) {\n      var label = ownerDocument(displayNode).getElementById(labelId);\n\n      if (label) {\n        var handler = function handler() {\n          if (getSelection().isCollapsed) {\n            displayNode.focus();\n          }\n        };\n\n        label.addEventListener('click', handler);\n        return function () {\n          label.removeEventListener('click', handler);\n        };\n      }\n    }\n\n    return undefined;\n  }, [labelId, displayNode]);\n\n  var update = function update(open, event) {\n    if (open) {\n      if (onOpen) {\n        onOpen(event);\n      }\n    } else if (onClose) {\n      onClose(event);\n    }\n\n    if (!isOpenControlled) {\n      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);\n      setOpenState(open);\n    }\n  };\n\n  var handleMouseDown = function handleMouseDown(event) {\n    // Ignore everything but left-click\n    if (event.button !== 0) {\n      return;\n    } // Hijack the default focus behavior.\n\n\n    event.preventDefault();\n    displayNode.focus();\n    update(true, event);\n  };\n\n  var handleClose = function handleClose(event) {\n    update(false, event);\n  };\n\n  var childrenArray = React.Children.toArray(children); // Support autofill.\n\n  var handleChange = function handleChange(event) {\n    var index = childrenArray.map(function (child) {\n      return child.props.value;\n    }).indexOf(event.target.value);\n\n    if (index === -1) {\n      return;\n    }\n\n    var child = childrenArray[index];\n    setValue(child.props.value);\n\n    if (onChange) {\n      onChange(event, child);\n    }\n  };\n\n  var handleItemClick = function handleItemClick(child) {\n    return function (event) {\n      if (!multiple) {\n        update(false, event);\n      }\n\n      var newValue;\n\n      if (multiple) {\n        newValue = Array.isArray(value) ? value.slice() : [];\n        var itemIndex = value.indexOf(child.props.value);\n\n        if (itemIndex === -1) {\n          newValue.push(child.props.value);\n        } else {\n          newValue.splice(itemIndex, 1);\n        }\n      } else {\n        newValue = child.props.value;\n      }\n\n      if (child.props.onClick) {\n        child.props.onClick(event);\n      }\n\n      if (value === newValue) {\n        return;\n      }\n\n      setValue(newValue);\n\n      if (onChange) {\n        event.persist(); // Preact support, target is read only property on a native event.\n\n        Object.defineProperty(event, 'target', {\n          writable: true,\n          value: {\n            value: newValue,\n            name: name\n          }\n        });\n        onChange(event, child);\n      }\n    };\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (!readOnly) {\n      var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by\n      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html\n      'Enter'];\n\n      if (validKeys.indexOf(event.key) !== -1) {\n        event.preventDefault();\n        update(true, event);\n      }\n    }\n  };\n\n  var open = displayNode !== null && (isOpenControlled ? openProp : openState);\n\n  var handleBlur = function handleBlur(event) {\n    // if open event.stopImmediatePropagation\n    if (!open && onBlur) {\n      event.persist(); // Preact support, target is read only property on a native event.\n\n      Object.defineProperty(event, 'target', {\n        writable: true,\n        value: {\n          value: value,\n          name: name\n        }\n      });\n      onBlur(event);\n    }\n  };\n\n  delete other['aria-invalid'];\n  var display;\n  var displaySingle;\n  var displayMultiple = [];\n  var computeDisplay = false;\n  var foundMatch = false; // No need to display any value if the field is empty.\n\n  if (isFilled({\n    value: value\n  }) || displayEmpty) {\n    if (renderValue) {\n      display = renderValue(value);\n    } else {\n      computeDisplay = true;\n    }\n  }\n\n  var items = childrenArray.map(function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: The Select component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    var selected;\n\n    if (multiple) {\n      if (!Array.isArray(value)) {\n        throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`.\" : _formatMuiErrorMessage(2));\n      }\n\n      selected = value.some(function (v) {\n        return areEqualValues(v, child.props.value);\n      });\n\n      if (selected && computeDisplay) {\n        displayMultiple.push(child.props.children);\n      }\n    } else {\n      selected = areEqualValues(value, child.props.value);\n\n      if (selected && computeDisplay) {\n        displaySingle = child.props.children;\n      }\n    }\n\n    if (selected) {\n      foundMatch = true;\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      'aria-selected': selected ? 'true' : undefined,\n      onClick: handleItemClick(child),\n      onKeyUp: function onKeyUp(event) {\n        if (event.key === ' ') {\n          // otherwise our MenuItems dispatches a click event\n          // it's not behavior of the native <option> and causes\n          // the select to close immediately since we open on space keydown\n          event.preventDefault();\n        }\n\n        if (child.props.onKeyUp) {\n          child.props.onKeyUp(event);\n        }\n      },\n      role: 'option',\n      selected: selected,\n      value: undefined,\n      // The value is most likely not a valid HTML attribute.\n      'data-value': child.props.value // Instead, we provide it as a data attribute.\n\n    });\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (!foundMatch && !multiple && value !== '') {\n        var values = childrenArray.map(function (child) {\n          return child.props.value;\n        });\n        console.warn([\"Material-UI: You have provided an out-of-range value `\".concat(value, \"` for the select \").concat(name ? \"(name=\\\"\".concat(name, \"\\\") \") : '', \"component.\"), \"Consider providing a value that matches one of the available options or ''.\", \"The available values are \".concat(values.filter(function (x) {\n          return x != null;\n        }).map(function (x) {\n          return \"`\".concat(x, \"`\");\n        }).join(', ') || '\"\"', \".\")].join('\\n'));\n      }\n    }, [foundMatch, childrenArray, multiple, name, value]);\n  }\n\n  if (computeDisplay) {\n    display = multiple ? displayMultiple.join(', ') : displaySingle;\n  } // Avoid performing a layout computation in the render method.\n\n\n  var menuMinWidth = menuMinWidthState;\n\n  if (!autoWidth && isOpenControlled && displayNode) {\n    menuMinWidth = displayNode.clientWidth;\n  }\n\n  var tabIndex;\n\n  if (typeof tabIndexProp !== 'undefined') {\n    tabIndex = tabIndexProp;\n  } else {\n    tabIndex = disabled ? null : 0;\n  }\n\n  var buttonId = SelectDisplayProps.id || (name ? \"mui-component-select-\".concat(name) : undefined);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, // TODO v5: merge root and select\n    classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),\n    ref: setDisplayNode,\n    tabIndex: tabIndex,\n    role: \"button\",\n    \"aria-disabled\": disabled ? 'true' : undefined,\n    \"aria-expanded\": open ? 'true' : undefined,\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": [labelId, buttonId].filter(Boolean).join(' ') || undefined,\n    onKeyDown: handleKeyDown,\n    onMouseDown: disabled || readOnly ? null : handleMouseDown,\n    onBlur: handleBlur,\n    onFocus: onFocus\n  }, SelectDisplayProps, {\n    // The id is required for proper a11y\n    id: buttonId\n  }), isEmpty(display) ?\n  /*#__PURE__*/\n  // eslint-disable-next-line react/no-danger\n  React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: '&#8203;'\n    }\n  }) : display), /*#__PURE__*/React.createElement(\"input\", _extends({\n    value: Array.isArray(value) ? value.join(',') : value,\n    name: name,\n    ref: inputRef,\n    \"aria-hidden\": true,\n    onChange: handleChange,\n    tabIndex: -1,\n    className: classes.nativeInput,\n    autoFocus: autoFocus\n  }, other)), /*#__PURE__*/React.createElement(IconComponent, {\n    className: clsx(classes.icon, classes[\"icon\".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)\n  }), /*#__PURE__*/React.createElement(Menu, _extends({\n    id: \"menu-\".concat(name || ''),\n    anchorEl: displayNode,\n    open: open,\n    onClose: handleClose\n  }, MenuProps, {\n    MenuListProps: _extends({\n      'aria-labelledby': labelId,\n      role: 'listbox',\n      disableListWrap: true\n    }, MenuProps.MenuListProps),\n    PaperProps: _extends({}, MenuProps.PaperProps, {\n      style: _extends({\n        minWidth: menuMinWidth\n      }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)\n    })\n  }), items));\n});\nprocess.env.NODE_ENV !== \"production\" ? SelectInput.propTypes = {\n  /**\n   * @ignore\n   */\n  'aria-label': PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<MenuItem>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The CSS class name of the select element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the select will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the selected item is displayed even if its value is empty.\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType.isRequired,\n\n  /**\n   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`\n   * Equivalent to `ref`\n   */\n  inputRef: refType,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Name attribute of the `select` or hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  type: PropTypes.any,\n\n  /**\n   * The input value.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default SelectInput;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = /*#__PURE__*/React.createElement(Input, null);\n\nvar _ref2 = /*#__PURE__*/React.createElement(FilledInput, null);\n\nvar Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      id = props.id,\n      input = props.input,\n      inputProps = props.inputProps,\n      label = props.label,\n      labelId = props.labelId,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: /*#__PURE__*/React.createElement(OutlinedInput, {\n      label: label,\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {\n      id: id\n    } : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      labelId: labelId,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: _extends({\n        id: id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  label: PropTypes.node,\n\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * See [OutlinedInput#label](/api/outlined-input/#props)\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"],"sourceRoot":""}