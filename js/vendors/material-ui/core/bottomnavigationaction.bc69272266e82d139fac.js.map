{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/BottomNavigationAction/BottomNavigationAction.js"],"names":[],"mappings":"+NAQW,EAAS,SAAgB,EAAO,CACzC,MAAO,CAEL,KAAM,CACJ,WAAY,EAAM,YAAY,OAAO,CAAC,QAAS,eAAgB,CAC7D,SAAU,EAAM,YAAY,SAAS,QAEvC,QAAS,eACT,SAAU,GACV,SAAU,IACV,MAAO,EAAM,QAAQ,KAAK,UAC1B,KAAM,IACN,aAAc,CACZ,WAAY,IAEd,aAAc,CACZ,WAAY,EACZ,MAAO,EAAM,QAAQ,QAAQ,OAKjC,SAAU,GAGV,SAAU,GAGV,QAAS,CACP,QAAS,cACT,WAAY,SACZ,eAAgB,SAChB,MAAO,OACP,cAAe,UAIjB,MAAO,CACL,WAAY,EAAM,WAAW,WAC7B,SAAU,EAAM,WAAW,QAAQ,IACnC,QAAS,EACT,WAAY,+BACZ,gBAAiB,OACjB,aAAc,CACZ,QAAS,EACT,gBAAiB,MAEnB,aAAc,CACZ,SAAU,EAAM,WAAW,QAAQ,QAKvC,EAAsC,aAAiB,SAAgC,EAAO,EAAK,CACrG,GAAI,GAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAO,EAAM,KACb,EAAQ,EAAM,MACd,EAAW,EAAM,SACjB,EAAU,EAAM,QAChB,EAAW,EAAM,SACjB,EAAY,EAAM,UAClB,EAAQ,EAAM,MACd,EAAQ,QAAyB,EAAO,CAAC,UAAW,YAAa,OAAQ,QAAS,WAAY,UAAW,WAAY,YAAa,UAElI,EAAe,SAAsB,EAAO,CAC1C,GACF,EAAS,EAAO,GAGd,GACF,EAAQ,IAIZ,MAAoB,iBAAoB,IAAY,QAAS,CAC3D,MACA,UAAW,QAAK,EAAQ,KAAM,EAAW,EAAW,EAAQ,SAAW,CAAC,GAAa,EAAQ,UAC7F,YAAa,GACb,QAAS,GACR,GAAqB,gBAAoB,OAAQ,CAClD,UAAW,EAAQ,SAClB,EAAmB,gBAAoB,OAAQ,CAChD,UAAW,QAAK,EAAQ,MAAO,EAAW,EAAQ,SAAW,CAAC,GAAa,EAAQ,WAClF,OA8DL,QAAe,QAAW,EAAQ,CAChC,KAAM,8BACL","file":"js/vendors/material-ui/core/bottomnavigationaction.bc69272266e82d139fac.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      transition: theme.transitions.create(['color', 'padding-top'], {\n        duration: theme.transitions.duration.short\n      }),\n      padding: '6px 12px 8px',\n      minWidth: 80,\n      maxWidth: 168,\n      color: theme.palette.text.secondary,\n      flex: '1',\n      '&$iconOnly': {\n        paddingTop: 16\n      },\n      '&$selected': {\n        paddingTop: 6,\n        color: theme.palette.primary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if selected. */\n    selected: {},\n\n    /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */\n    iconOnly: {},\n\n    /* Styles applied to the span element that wraps the icon and label. */\n    wrapper: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the label's span element. */\n    label: {\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(12),\n      opacity: 1,\n      transition: 'font-size 0.2s, opacity 0.2s',\n      transitionDelay: '0.1s',\n      '&$iconOnly': {\n        opacity: 0,\n        transitionDelay: '0s'\n      },\n      '&$selected': {\n        fontSize: theme.typography.pxToRem(14)\n      }\n    }\n  };\n};\nvar BottomNavigationAction = /*#__PURE__*/React.forwardRef(function BottomNavigationAction(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      icon = props.icon,\n      label = props.label,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      selected = props.selected,\n      showLabel = props.showLabel,\n      value = props.value,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"icon\", \"label\", \"onChange\", \"onClick\", \"selected\", \"showLabel\", \"value\"]);\n\n  var handleChange = function handleChange(event) {\n    if (onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ButtonBase, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),\n    focusRipple: true,\n    onClick: handleChange\n  }, other), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.wrapper\n  }, icon, /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)\n  }, label)));\n});\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigationAction.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   */\n  showLabel: PropTypes.bool,\n\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigationAction'\n})(BottomNavigationAction);"],"sourceRoot":""}