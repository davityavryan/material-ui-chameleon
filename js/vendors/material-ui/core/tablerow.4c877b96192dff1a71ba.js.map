{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/TableRow/TableRow.js"],"names":[],"mappings":"yOAQW,EAAS,SAAgB,EAAO,CACzC,MAAO,CAEL,KAAM,CACJ,MAAO,UACP,QAAS,YACT,cAAe,SAEf,QAAS,EACT,gBAAiB,CACf,gBAAiB,EAAM,QAAQ,OAAO,OAExC,+BAAgC,CAC9B,gBAAiB,SAAK,EAAM,QAAQ,UAAU,KAAM,EAAM,QAAQ,OAAO,mBAK7E,SAAU,GAGV,MAAO,GAGP,KAAM,GAGN,OAAQ,KAGR,EAAmB,KAMnB,EAAwB,aAAiB,SAAkB,EAAO,EAAK,CACzE,GAAI,GAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAmB,EAAM,UACzB,EAAY,IAAqB,OAAS,EAAmB,EAC7D,EAAe,EAAM,MACrB,EAAQ,IAAiB,OAAS,GAAQ,EAC1C,EAAkB,EAAM,SACxB,EAAW,IAAoB,OAAS,GAAQ,EAChD,EAAQ,QAAyB,EAAO,CAAC,UAAW,YAAa,YAAa,QAAS,aAEvF,EAAY,aAAiB,KACjC,MAAoB,iBAAoB,EAAW,QAAS,CAC1D,MACA,UAAW,QAAK,EAAQ,KAAM,EAAW,GAAa,CACpD,KAAQ,EAAQ,KAChB,OAAU,EAAQ,QAClB,EAAU,SAAU,GAAS,EAAQ,MAAO,GAAY,EAAQ,UAClE,KAAM,IAAc,EAAmB,KAAO,OAC7C,MAqCL,QAAe,QAAW,EAAQ,CAChC,KAAM,gBACL","file":"js/vendors/material-ui/core/tablerow.4c877b96192dff1a71ba.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: 'inherit',\n      display: 'table-row',\n      verticalAlign: 'middle',\n      // We disable the focus ring for mouse, touch and keyboard users.\n      outline: 0,\n      '&$hover:hover': {\n        backgroundColor: theme.palette.action.hover\n      },\n      '&$selected, &$selected:hover': {\n        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.selectedOpacity)\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Pseudo-class applied to the root element if `hover={true}`. */\n    hover: {},\n\n    /* Styles applied to the root element if table variant=\"head\". */\n    head: {},\n\n    /* Styles applied to the root element if table variant=\"footer\". */\n    footer: {}\n  };\n};\nvar defaultComponent = 'tr';\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\n\nvar TableRow = /*#__PURE__*/React.forwardRef(function TableRow(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? defaultComponent : _props$component,\n      _props$hover = props.hover,\n      hover = _props$hover === void 0 ? false : _props$hover,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"hover\", \"selected\"]);\n\n  var tablelvl2 = React.useContext(Tablelvl2Context);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className, tablelvl2 && {\n      'head': classes.head,\n      'footer': classes.footer\n    }[tablelvl2.variant], hover && classes.hover, selected && classes.selected),\n    role: Component === defaultComponent ? null : 'row'\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes = {\n  /**\n   * Should be valid <tr> children such as `TableCell`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, the table row will shade on hover.\n   */\n  hover: PropTypes.bool,\n\n  /**\n   * If `true`, the table row will have the selected shading.\n   */\n  selected: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableRow'\n})(TableRow);"],"sourceRoot":""}