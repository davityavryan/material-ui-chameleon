{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/NoSsr/index.js","webpack:///./node_modules/@material-ui/core/esm/NoSsr/NoSsr.js"],"names":["useEnhancedEffect","window","React","useLayoutEffect","useEffect","props","children","_props$defer","defer","_props$fallback","fallback","_React$useState","useState","mountedState","setMountedState","createElement","Fragment"],"mappings":"2OAAA,iB,8GCAA,cAGIA,GAFJ,QACA,MAC0C,oBAAXC,OAA4DC,UAAMC,gBAAkBD,UAAME,W,MAWzH,SAAeC,GACb,IAAIC,EAAWD,EAAMC,SACjBC,EAAeF,EAAMG,MACrBA,OAAyB,IAAjBD,GAAkCA,EAC1CE,EAAkBJ,EAAMK,SACxBA,OAA+B,IAApBD,EAA6B,KAAOA,EAE/CE,EAAkBT,UAAMU,UAAS,GACjCC,EAAeF,EAAgB,GAC/BG,EAAkBH,EAAgB,GAatC,OAXAX,GAAkB,WACXQ,GACHM,GAAgB,KAEjB,CAACN,IACJN,UAAME,WAAU,WACVI,GACFM,GAAgB,KAEjB,CAACN,IAEGN,UAAMa,cAAcb,UAAMc,SAAU,KAAMH,EAAeP,EAAWI,I","file":"js/vendors/material-ui/core/nossr-5bd17d66c6c5e6b0114a.js","sourcesContent":["export { default } from './NoSsr';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      mountedState = _React$useState[0],\n      setMountedState = _React$useState[1];\n\n  useEnhancedEffect(function () {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(function () {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;"],"sourceRoot":""}