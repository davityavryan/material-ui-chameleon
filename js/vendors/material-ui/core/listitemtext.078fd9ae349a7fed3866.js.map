{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/ListItemText/ListItemText.js"],"names":[],"mappings":"yOAQW,EAAS,CAElB,KAAM,CACJ,KAAM,WACN,SAAU,EACV,UAAW,EACX,aAAc,GAIhB,UAAW,CACT,UAAW,EACX,aAAc,GAIhB,MAAO,GAGP,MAAO,CACL,YAAa,IAIf,QAAS,GAGT,UAAW,IAET,EAA4B,aAAiB,SAAsB,EAAO,EAAK,CACjF,GAAI,GAAW,EAAM,SACjB,EAAU,EAAM,QAChB,EAAY,EAAM,UAClB,EAAwB,EAAM,kBAC9B,EAAoB,IAA0B,OAAS,GAAQ,EAC/D,EAAe,EAAM,MACrB,EAAQ,IAAiB,OAAS,GAAQ,EAC1C,EAAc,EAAM,QACpB,EAAyB,EAAM,uBAC/B,EAAgB,EAAM,UACtB,EAA2B,EAAM,yBACjC,EAAQ,QAAyB,EAAO,CAAC,WAAY,UAAW,YAAa,oBAAqB,QAAS,UAAW,yBAA0B,YAAa,6BAE7J,EAAoB,aAAiB,KACrC,EAAQ,EAAkB,MAE1B,EAAU,GAAoC,EAE9C,GAAW,MAAQ,EAAQ,OAAS,KAAc,CAAC,GACrD,GAAuB,gBAAoB,IAAY,QAAS,CAC9D,QAAS,EAAQ,QAAU,QAC3B,UAAW,EAAQ,QACnB,UAAW,OACX,QAAS,SACR,GAAyB,IAG9B,GAAI,GAAY,EAEhB,MAAI,IAAa,MAAQ,EAAU,OAAS,KAAc,CAAC,GACzD,GAAyB,gBAAoB,IAAY,QAAS,CAChE,QAAS,QACT,UAAW,EAAQ,UACnB,MAAO,gBACP,QAAS,SACR,GAA2B,IAGZ,gBAAoB,MAAO,QAAS,CACtD,UAAW,cAAK,EAAQ,KAAM,EAAW,GAAS,EAAQ,MAAO,GAAS,EAAQ,MAAO,GAAW,GAAa,EAAQ,WACzH,OACC,GAAQ,EAAS,KA4DtB,QAAe,QAAW,EAAQ,CAChC,KAAM,oBACL","file":"js/vendors/material-ui/core/listitemtext.078fd9ae349a7fed3866.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    minWidth: 0,\n    marginTop: 4,\n    marginBottom: 4\n  },\n\n  /* Styles applied to the `Typography` components if primary and secondary are set. */\n  multiline: {\n    marginTop: 6,\n    marginBottom: 6\n  },\n\n  /* Styles applied to the `Typography` components if dense. */\n  dense: {},\n\n  /* Styles applied to the root element if `inset={true}`. */\n  inset: {\n    paddingLeft: 56\n  },\n\n  /* Styles applied to the primary `Typography` component. */\n  primary: {},\n\n  /* Styles applied to the secondary `Typography` component. */\n  secondary: {}\n};\nvar ListItemText = /*#__PURE__*/React.forwardRef(function ListItemText(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      _props$inset = props.inset,\n      inset = _props$inset === void 0 ? false : _props$inset,\n      primaryProp = props.primary,\n      primaryTypographyProps = props.primaryTypographyProps,\n      secondaryProp = props.secondary,\n      secondaryTypographyProps = props.secondaryTypographyProps,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\", \"inset\", \"primary\", \"primaryTypographyProps\", \"secondary\", \"secondaryTypographyProps\"]);\n\n  var _React$useContext = React.useContext(ListContext),\n      dense = _React$useContext.dense;\n\n  var primary = primaryProp != null ? primaryProp : children;\n\n  if (primary != null && primary.type !== Typography && !disableTypography) {\n    primary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: dense ? 'body2' : 'body1',\n      className: classes.primary,\n      component: \"span\",\n      display: \"block\"\n    }, primaryTypographyProps), primary);\n  }\n\n  var secondary = secondaryProp;\n\n  if (secondary != null && secondary.type !== Typography && !disableTypography) {\n    secondary = /*#__PURE__*/React.createElement(Typography, _extends({\n      variant: \"body2\",\n      className: classes.secondary,\n      color: \"textSecondary\",\n      display: \"block\"\n    }, secondaryTypographyProps), secondary);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dense && classes.dense, inset && classes.inset, primary && secondary && classes.multiline),\n    ref: ref\n  }, other), primary, secondary);\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Alias for the `primary` prop.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, the children won't be wrapped by a Typography component.\r\n   * This can be useful to render an alternative Typography variant by wrapping\r\n   * the `children` (or `primary`) text, and optional `secondary` text\r\n   * with the Typography component.\r\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\r\n   * If `true`, the children will be indented.\r\n   * This should be used if there is no left avatar or left icon.\r\n   */\n  inset: PropTypes.bool,\n\n  /**\r\n   * The main content element.\r\n   */\n  primary: PropTypes.node,\n\n  /**\r\n   * These props will be forwarded to the primary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\n  primaryTypographyProps: PropTypes.object,\n\n  /**\r\n   * The secondary content element.\r\n   */\n  secondary: PropTypes.node,\n\n  /**\r\n   * These props will be forwarded to the secondary typography component\r\n   * (as long as disableTypography is not `true`).\r\n   */\n  secondaryTypographyProps: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemText'\n})(ListItemText);"],"sourceRoot":""}