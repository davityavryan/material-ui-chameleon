{"version":3,"sources":["webpack://material-ui-chameleon-docs/./node_modules/@material-ui/core/esm/Portal/Portal.js"],"names":[],"mappings":"yMAOA,WAAsB,EAAW,CAC/B,SAAY,MAAO,IAAc,WAAa,IAAc,EAErD,cAAqB,GAG9B,GAAI,GAAoB,MAAO,SAAW,YAAc,kBAAwB,YAM5E,EAAsB,aAAiB,SAAgB,EAAO,EAAK,CACrE,GAAI,GAAW,EAAM,SACjB,EAAY,EAAM,UAClB,EAAuB,EAAM,cAC7B,EAAgB,IAAyB,OAAS,GAAQ,EAC1D,EAAa,EAAM,WAEnB,EAAkB,WAAe,MACjC,EAAY,EAAgB,GAC5B,EAAe,EAAgB,GAE/B,EAAY,QAAyB,iBAAqB,GAAY,EAAS,IAAM,KAAM,GAsB/F,MArBA,GAAkB,UAAY,CACvB,GACH,EAAa,EAAa,IAAc,SAAS,OAElD,CAAC,EAAW,IACf,EAAkB,UAAY,CAC5B,GAAI,GAAa,CAAC,EAChB,cAAO,EAAK,GACL,UAAY,CACjB,QAAO,EAAK,QAKf,CAAC,EAAK,EAAW,IACpB,EAAkB,UAAY,CACxB,GAAe,IAAa,IAC9B,KAED,CAAC,EAAY,EAAW,IAEvB,EACgB,iBAAqB,GACjB,eAAmB,EAAU,CAC/C,IAAK,IAIF,EAGF,GAAyB,eAAsB,EAAU,KA2ClE,QAAe","file":"js/vendors/material-ui/core/portal.e2adbfec2bc8ddbd483e.js","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      mountNode = _React$useState[0],\n      setMountNode = _React$useState[1];\n\n  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(function () {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(function () {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return function () {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(function () {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"],"sourceRoot":""}