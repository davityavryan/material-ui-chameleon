{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/TransferListPage/Components/EnhancedTransferList/EnhancedTransferList.style.ts","webpack://material-ui-chameleon-docs/./src/Pages/TransferListPage/Components/EnhancedTransferList/EnhancedTransferList.tsx"],"names":[],"mappings":"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","file":"js/component/transfer-list/enhanced.b9c54e4b5a5ebc52092d.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(({ spacing, palette }) =>\n    createStyles({\n        root: {\n            margin: 'auto',\n        },\n        cardHeader: {\n            padding: spacing(1, 2),\n        },\n        list: {\n            width: 200,\n            height: 230,\n            backgroundColor: palette.background.paper,\n            overflow: 'auto',\n        },\n        button: {\n            margin: spacing(0.5, 0),\n        },\n    })\n);\n\nexport default useStyles;\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n\nimport useStyles from './EnhancedTransferList.style';\n\nfunction not(a: number[], b: number[]) {\n    return a.filter((value) => b.indexOf(value) === -1);\n}\n\nfunction intersection(a: number[], b: number[]) {\n    return a.filter((value) => b.indexOf(value) !== -1);\n}\n\nfunction union(a: number[], b: number[]) {\n    return [...a, ...not(b, a)];\n}\n\nfunction EnhancedTransferList() {\n    const classes = useStyles();\n\n    const [checked, setChecked] = React.useState<number[]>([]);\n    const [left, setLeft] = React.useState<number[]>([0, 1, 2, 3]);\n    const [right, setRight] = React.useState<number[]>([4, 5, 6, 7]);\n\n    const leftChecked = intersection(checked, left);\n    const rightChecked = intersection(checked, right);\n\n    const handleToggle = (value: number) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n    };\n\n    const numberOfChecked = (items: number[]) => intersection(checked, items).length;\n\n    const handleToggleAll = (items: number[]) => () => {\n        if (numberOfChecked(items) === items.length) {\n            setChecked(not(checked, items));\n        } else {\n            setChecked(union(checked, items));\n        }\n    };\n\n    const handleCheckedRight = () => {\n        setRight(right.concat(leftChecked));\n        setLeft(not(left, leftChecked));\n        setChecked(not(checked, leftChecked));\n    };\n\n    const handleCheckedLeft = () => {\n        setLeft(left.concat(rightChecked));\n        setRight(not(right, rightChecked));\n        setChecked(not(checked, rightChecked));\n    };\n\n    const customList = (title: React.ReactNode, items: number[]) => (\n        <Card>\n            <CardHeader\n                className={classes.cardHeader}\n                avatar={\n                    <Checkbox\n                        onClick={handleToggleAll(items)}\n                        checked={numberOfChecked(items) === items.length && items.length !== 0}\n                        indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}\n                        disabled={items.length === 0}\n                        inputProps={{ 'aria-label': 'all items selected' }}\n                    />\n                }\n                title={title}\n                subheader={`${numberOfChecked(items)}/${items.length} selected`}\n            />\n            <Divider />\n            <List className={classes.list} dense component=\"div\" role=\"list\">\n                {items.map((value: number) => {\n                    const labelId = `transfer-list-all-item-${value}-label`;\n\n                    return (\n                        <ListItem key={value} role=\"listitem\" button onClick={handleToggle(value)}>\n                            <ListItemIcon>\n                                <Checkbox\n                                    checked={checked.indexOf(value) !== -1}\n                                    tabIndex={-1}\n                                    disableRipple\n                                    inputProps={{ 'aria-labelledby': labelId }}\n                                />\n                            </ListItemIcon>\n                            <ListItemText id={labelId} primary={`List item ${value + 1}`} />\n                        </ListItem>\n                    );\n                })}\n                <ListItem />\n            </List>\n        </Card>\n    );\n\n    return (\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\" className={classes.root}>\n            <Grid item>{customList('Choices', left)}</Grid>\n            <Grid item>\n                <Grid container direction=\"column\" alignItems=\"center\">\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleCheckedRight}\n                        disabled={leftChecked.length === 0}\n                        aria-label=\"move selected right\"\n                    >\n                        &gt;\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleCheckedLeft}\n                        disabled={rightChecked.length === 0}\n                        aria-label=\"move selected left\"\n                    >\n                        &lt;\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item>{customList('Chosen', right)}</Grid>\n        </Grid>\n    );\n}\n\nexport default EnhancedTransferList;\n"],"sourceRoot":""}