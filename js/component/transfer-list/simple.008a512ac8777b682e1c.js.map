{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/TransferListPage/Components/SimpleTransferList/SimpleTransferList.style.ts","webpack://material-ui-chameleon-docs/./src/Pages/TransferListPage/Components/SimpleTransferList/SimpleTransferList.tsx"],"names":[],"mappings":"iSAkBA,QAhBkB,QAAW,CAAC,CAAE,aAC5B,QAAa,CACT,KAAM,CACF,OAAQ,QAEZ,MAAO,CACH,MAAO,IACP,OAAQ,IACR,SAAU,QAEd,OAAQ,CACJ,OAAQ,EAAQ,GAAK,OCAjC,WAAa,EAAa,EAAa,CACnC,MAAO,GAAE,OAAQ,GAAU,EAAE,QAAQ,KAAW,IAGpD,WAAsB,EAAa,EAAa,CAC5C,MAAO,GAAE,OAAQ,GAAU,EAAE,QAAQ,KAAW,IAGpD,YAA8B,CAC1B,KAAM,GAAU,IAEV,CAAC,EAAS,GAAc,WAAyB,IACjD,CAAC,EAAM,GAAW,WAAyB,CAAC,EAAG,EAAG,EAAG,IACrD,CAAC,EAAO,GAAY,WAAyB,CAAC,EAAG,EAAG,EAAG,IAEvD,EAAc,EAAa,EAAS,GACpC,EAAe,EAAa,EAAS,GAErC,EAAgB,GAAkB,IAAM,CAC1C,KAAM,GAAe,EAAQ,QAAQ,GAC/B,EAAa,CAAC,GAAG,GAEnB,IAAiB,GACjB,EAAW,KAAK,GAEhB,EAAW,OAAO,EAAc,GAGpC,EAAW,IAGT,EAAiB,IAAM,CACzB,EAAS,EAAM,OAAO,IACtB,EAAQ,KAGN,EAAqB,IAAM,CAC7B,EAAS,EAAM,OAAO,IACtB,EAAQ,EAAI,EAAM,IAClB,EAAW,EAAI,EAAS,KAGtB,EAAoB,IAAM,CAC5B,EAAQ,EAAK,OAAO,IACpB,EAAS,EAAI,EAAO,IACpB,EAAW,EAAI,EAAS,KAGtB,EAAgB,IAAM,CACxB,EAAQ,EAAK,OAAO,IACpB,EAAS,KAGP,EAAc,GAChB,gBAAC,IAAD,CAAO,UAAW,EAAQ,OACtB,gBAAC,IAAD,CAAM,MAAK,GAAC,UAAU,MAAM,KAAK,QAC5B,EAAM,IAAK,GAAkB,CAC1B,KAAM,GAAU,sBAAsB,UAEtC,MACI,iBAAC,IAAD,CAAU,IAAK,EAAO,KAAK,WAAW,OAAM,GAAC,QAAS,EAAa,IAC/D,gBAAC,IAAD,KACI,gBAAC,IAAD,CACI,QAAS,EAAQ,QAAQ,KAAW,GACpC,SAAU,GACV,cAAa,GACb,WAAY,CAAE,kBAAmB,MAGzC,gBAAC,IAAD,CAAc,GAAI,EAAS,QAAS,aAAa,EAAQ,SAIrE,gBAAC,IAAD,QAKZ,MACI,iBAAC,IAAD,CAAM,UAAS,GAAC,QAAS,EAAG,QAAQ,SAAS,WAAW,SAAS,UAAW,EAAQ,MAChF,gBAAC,IAAD,CAAM,KAAI,IAAE,EAAW,IACvB,gBAAC,IAAD,CAAM,KAAI,IACN,gBAAC,IAAD,CAAM,UAAS,GAAC,UAAU,SAAS,WAAW,UAC1C,gBAAC,IAAD,CACI,QAAQ,WACR,KAAK,QACL,UAAW,EAAQ,OACnB,QAAS,EACT,SAAU,EAAK,SAAW,EAC1B,aAAW,kBACd,UAGD,gBAAC,IAAD,CACI,QAAQ,WACR,KAAK,QACL,UAAW,EAAQ,OACnB,QAAS,EACT,SAAU,EAAY,SAAW,EACjC,aAAW,uBACd,KAGD,gBAAC,IAAD,CACI,QAAQ,WACR,KAAK,QACL,UAAW,EAAQ,OACnB,QAAS,EACT,SAAU,EAAa,SAAW,EAClC,aAAW,sBACd,KAGD,gBAAC,IAAD,CACI,QAAQ,WACR,KAAK,QACL,UAAW,EAAQ,OACnB,QAAS,EACT,SAAU,EAAM,SAAW,EAC3B,aAAW,iBACd,YAKT,gBAAC,IAAD,CAAM,KAAI,IAAE,EAAW,KAKnC,QAAe","file":"js/component/transfer-list/simple.008a512ac8777b682e1c.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(({ spacing }) =>\n    createStyles({\n        root: {\n            margin: 'auto',\n        },\n        paper: {\n            width: 200,\n            height: 230,\n            overflow: 'auto',\n        },\n        button: {\n            margin: spacing(0.5, 0),\n        },\n    })\n);\n\nexport default useStyles;\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\n\nimport useStyles from './SimpleTransferList.style';\n\nfunction not(a: number[], b: number[]) {\n    return a.filter((value) => b.indexOf(value) === -1);\n}\n\nfunction intersection(a: number[], b: number[]) {\n    return a.filter((value) => b.indexOf(value) !== -1);\n}\n\nfunction SimpleTransferList() {\n    const classes = useStyles();\n\n    const [checked, setChecked] = React.useState<number[]>([]);\n    const [left, setLeft] = React.useState<number[]>([0, 1, 2, 3]);\n    const [right, setRight] = React.useState<number[]>([4, 5, 6, 7]);\n\n    const leftChecked = intersection(checked, left);\n    const rightChecked = intersection(checked, right);\n\n    const handleToggle = (value: number) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n    };\n\n    const handleAllRight = () => {\n        setRight(right.concat(left));\n        setLeft([]);\n    };\n\n    const handleCheckedRight = () => {\n        setRight(right.concat(leftChecked));\n        setLeft(not(left, leftChecked));\n        setChecked(not(checked, leftChecked));\n    };\n\n    const handleCheckedLeft = () => {\n        setLeft(left.concat(rightChecked));\n        setRight(not(right, rightChecked));\n        setChecked(not(checked, rightChecked));\n    };\n\n    const handleAllLeft = () => {\n        setLeft(left.concat(right));\n        setRight([]);\n    };\n\n    const customList = (items: number[]) => (\n        <Paper className={classes.paper}>\n            <List dense component=\"div\" role=\"list\">\n                {items.map((value: number) => {\n                    const labelId = `transfer-list-item-${value}-label`;\n\n                    return (\n                        <ListItem key={value} role=\"listitem\" button onClick={handleToggle(value)}>\n                            <ListItemIcon>\n                                <Checkbox\n                                    checked={checked.indexOf(value) !== -1}\n                                    tabIndex={-1}\n                                    disableRipple\n                                    inputProps={{ 'aria-labelledby': labelId }}\n                                />\n                            </ListItemIcon>\n                            <ListItemText id={labelId} primary={`List item ${value + 1}`} />\n                        </ListItem>\n                    );\n                })}\n                <ListItem />\n            </List>\n        </Paper>\n    );\n\n    return (\n        <Grid container spacing={2} justify=\"center\" alignItems=\"center\" className={classes.root}>\n            <Grid item>{customList(left)}</Grid>\n            <Grid item>\n                <Grid container direction=\"column\" alignItems=\"center\">\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleAllRight}\n                        disabled={left.length === 0}\n                        aria-label=\"move all right\"\n                    >\n                        ≫\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleCheckedRight}\n                        disabled={leftChecked.length === 0}\n                        aria-label=\"move selected right\"\n                    >\n                        &gt;\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleCheckedLeft}\n                        disabled={rightChecked.length === 0}\n                        aria-label=\"move selected left\"\n                    >\n                        &lt;\n                    </Button>\n                    <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        className={classes.button}\n                        onClick={handleAllLeft}\n                        disabled={right.length === 0}\n                        aria-label=\"move all left\"\n                    >\n                        ≪\n                    </Button>\n                </Grid>\n            </Grid>\n            <Grid item>{customList(right)}</Grid>\n        </Grid>\n    );\n}\n\nexport default SimpleTransferList;\n"],"sourceRoot":""}