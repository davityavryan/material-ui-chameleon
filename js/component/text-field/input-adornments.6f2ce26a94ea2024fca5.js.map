{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/TextFieldsPage/Components/InputAdornmentsTextFields/InputAdornmentsTextFields.style.ts","webpack://material-ui-chameleon-docs/./src/Pages/TextFieldsPage/Components/InputAdornmentsTextFields/InputAdornmentsTextFields.tsx"],"names":[],"mappings":"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","file":"js/component/text-field/input-adornments.6f2ce26a94ea2024fca5.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(({ spacing }) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            flexWrap: 'wrap',\n        },\n        margin: {\n            margin: spacing(1),\n        },\n        withoutLabel: {\n            marginTop: spacing(3),\n        },\n        textField: {\n            width: '25ch',\n        },\n    })\n);\n\nexport default useStyles;\n","// Example is taken from https://material-ui.com/components/text-fields/#input-adornments\n\nimport React from 'react';\n\nimport clsx from 'clsx';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nimport useStyles from './InputAdornmentsTextFields.style';\n\nfunction InputAdornmentsTextFields() {\n    const classes = useStyles();\n\n    const [values, setValues] = React.useState({\n        amount: '',\n        password: '',\n        weight: '',\n        weightRange: '',\n        showPassword: false,\n    });\n\n    const handleChange: (prop: string) => React.ChangeEventHandler<HTMLInputElement> = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n    };\n\n    const handleMouseDownPassword: React.MouseEventHandler = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n        <div className={classes.root}>\n            <div>\n                <TextField\n                    label=\"With normal TextField\"\n                    id=\"standard-start-adornment\"\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\n                    }}\n                />\n                <FormControl className={clsx(classes.margin, classes.withoutLabel, classes.textField)}>\n                    <Input\n                        id=\"standard-adornment-weight\"\n                        value={values.weight}\n                        onChange={handleChange('weight')}\n                        endAdornment={<InputAdornment position=\"end\">Kg</InputAdornment>}\n                        aria-describedby=\"standard-weight-helper-text\"\n                        inputProps={{\n                            'aria-label': 'weight',\n                        }}\n                    />\n                    <FormHelperText id=\"standard-weight-helper-text\">Weight</FormHelperText>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField)}>\n                    <InputLabel htmlFor=\"standard-adornment-password\">Password</InputLabel>\n                    <Input\n                        id=\"standard-adornment-password\"\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                >\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                </FormControl>\n                <FormControl fullWidth className={classes.margin}>\n                    <InputLabel htmlFor=\"standard-adornment-amount\">Amount</InputLabel>\n                    <Input\n                        id=\"standard-adornment-amount\"\n                        value={values.amount}\n                        onChange={handleChange('amount')}\n                        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                    />\n                </FormControl>\n            </div>\n            <div>\n                <TextField\n                    label=\"With normal TextField\"\n                    id=\"filled-start-adornment\"\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\n                    }}\n                    variant=\"filled\"\n                />\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                    <FilledInput\n                        id=\"filled-adornment-weight\"\n                        value={values.weight}\n                        onChange={handleChange('weight')}\n                        endAdornment={<InputAdornment position=\"end\">Kg</InputAdornment>}\n                        aria-describedby=\"filled-weight-helper-text\"\n                        inputProps={{\n                            'aria-label': 'weight',\n                        }}\n                    />\n                    <FormHelperText id=\"filled-weight-helper-text\">Weight</FormHelperText>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"filled\">\n                    <InputLabel htmlFor=\"filled-adornment-password\">Password</InputLabel>\n                    <FilledInput\n                        id=\"filled-adornment-password\"\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                    edge=\"end\"\n                                >\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                    />\n                </FormControl>\n                <FormControl fullWidth className={classes.margin} variant=\"filled\">\n                    <InputLabel htmlFor=\"filled-adornment-amount\">Amount</InputLabel>\n                    <FilledInput\n                        id=\"filled-adornment-amount\"\n                        value={values.amount}\n                        onChange={handleChange('amount')}\n                        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                    />\n                </FormControl>\n            </div>\n            <div>\n                <TextField\n                    label=\"With normal TextField\"\n                    id=\"outlined-start-adornment\"\n                    className={clsx(classes.margin, classes.textField)}\n                    InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\n                    }}\n                    variant=\"outlined\"\n                />\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\n                    <OutlinedInput\n                        id=\"outlined-adornment-weight\"\n                        value={values.weight}\n                        onChange={handleChange('weight')}\n                        endAdornment={<InputAdornment position=\"end\">Kg</InputAdornment>}\n                        aria-describedby=\"outlined-weight-helper-text\"\n                        inputProps={{\n                            'aria-label': 'weight',\n                        }}\n                        labelWidth={0}\n                    />\n                    <FormHelperText id=\"outlined-weight-helper-text\">Weight</FormHelperText>\n                </FormControl>\n                <FormControl className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\n                    <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\n                    <OutlinedInput\n                        id=\"outlined-adornment-password\"\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        endAdornment={\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                    edge=\"end\"\n                                >\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                            </InputAdornment>\n                        }\n                        labelWidth={70}\n                    />\n                </FormControl>\n                <FormControl fullWidth className={classes.margin} variant=\"outlined\">\n                    <InputLabel htmlFor=\"outlined-adornment-amount\">Amount</InputLabel>\n                    <OutlinedInput\n                        id=\"outlined-adornment-amount\"\n                        value={values.amount}\n                        onChange={handleChange('amount')}\n                        startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n                        labelWidth={60}\n                    />\n                </FormControl>\n            </div>\n        </div>\n    );\n}\n\nexport default InputAdornmentsTextFields;\n"],"sourceRoot":""}