{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/ButtonGroupPage/Components/SplitButtonGroup/SplitButtonGroup.tsx"],"names":[],"mappings":"ymBAaA,KAAM,GAAU,CAAC,wBAAyB,mBAAoB,oBAE9D,YAA4B,CACxB,KAAM,CAAC,EAAM,GAAW,WAAe,IACjC,EAAY,SAA6B,MACzC,CAAC,EAAe,GAAoB,WAAe,GAEnD,EAAc,IAAM,CACtB,QAAQ,KAAK,eAAe,EAAQ,OAGlC,EAAsB,CAAC,EAAoD,IAAkB,CAC/F,EAAiB,GACjB,EAAQ,KAGN,EAAe,IAAM,CACvB,EAAS,GAAa,CAAC,IAGrB,EAAe,GAAkD,CAC/D,EAAU,SAAW,EAAU,QAAQ,SAAS,EAAM,SAI1D,EAAQ,KAGZ,MACI,iBAAC,WAAD,KACI,gBAAC,IAAD,CAAa,QAAQ,YAAY,MAAM,UAAU,IAAK,EAAW,aAAW,gBACxE,gBAAC,IAAD,CAAQ,QAAS,GAAc,EAAQ,IACvC,gBAAC,IAAD,CACI,MAAM,UACN,KAAK,QACL,gBAAe,EAAO,oBAAsB,OAC5C,gBAAe,EAAO,OAAS,OAC/B,aAAW,wBACX,gBAAc,OACd,QAAS,GAET,gBAAC,IAAD,QAGR,gBAAC,IAAD,CAAQ,OAAY,SAAU,EAAU,QAAS,KAAM,OAAW,WAAU,GAAC,cAAa,IACrF,CAAC,CAAE,kBAAiB,eACjB,gBAAC,IAAD,OACQ,GADR,CAEI,MAAO,CACH,gBAAiB,IAAc,SAAW,aAAe,mBAG7D,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAmB,YAAa,GAC5B,gBAAC,IAAD,CAAU,GAAG,qBACR,EAAQ,IAAI,CAAC,EAAQ,IAClB,gBAAC,IAAD,CACI,IAAK,EACL,SAAU,IAAU,EACpB,SAAU,IAAU,EACpB,QAAU,GAAU,EAAoB,EAAO,IAE9C,UAa7C,QAAe","file":"js/component/button-group/split.6a558da2613123b30bcf.js","sourcesContent":["import React, { Fragment } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\nconst options = ['Create a merge commit', 'Squash and merge', 'Rebase and merge'];\n\nfunction SplitButtonGroup() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef<HTMLDivElement>(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = (event: React.MouseEvent<HTMLLIElement, MouseEvent>, index: number) => {\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target as HTMLElement)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Fragment>\n            <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\n                <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n                <Button\n                    color=\"primary\"\n                    size=\"small\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <ArrowDropDownIcon />\n                </Button>\n            </ButtonGroup>\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\">\n                                    {options.map((option, index) => (\n                                        <MenuItem\n                                            key={option}\n                                            disabled={index === 2}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index)}\n                                        >\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </Fragment>\n    );\n}\n\nexport default SplitButtonGroup;\n"],"sourceRoot":""}