{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/SelectsPage/Components/MultipleSelect/MultipleSelect.style.ts","webpack://material-ui-chameleon-docs/./src/Pages/SelectsPage/Components/MultipleSelect/MultipleSelect.tsx"],"names":[],"mappings":"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","file":"js/component/select/multiple.acd67db90efd73519df7.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(({ spacing }) =>\n    createStyles({\n        formControl: {\n            margin: spacing(1),\n            minWidth: 120,\n            maxWidth: 300,\n        },\n        chips: {\n            display: 'flex',\n            flexWrap: 'wrap',\n        },\n        chip: {\n            margin: 2,\n        },\n        noLabel: {\n            marginTop: spacing(3),\n        },\n    })\n);\n\nexport default useStyles;\n","import React from 'react';\n\nimport clsx from 'clsx';\n\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport { useTheme, Theme } from '@material-ui/core/styles';\n\nimport useStyles from './MultipleSelect.style';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nconst names = [\n    'Oliver Hansen',\n    'Van Henry',\n    'April Tucker',\n    'Ralph Hubbard',\n    'Omar Alexander',\n    'Carlos Abbott',\n    'Miriam Wagner',\n    'Bradley Wilkerson',\n    'Virginia Andrews',\n    'Kelly Snyder',\n];\n\nfunction getStyles(name: string, personName: string[], { typography }: Theme) {\n    return {\n        fontWeight: personName.indexOf(name) === -1 ? typography.fontWeightRegular : typography.fontWeightMedium,\n    };\n}\n\nfunction MultipleSelect() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [personName, setPersonName] = React.useState<string[]>([]);\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setPersonName(event.target.value as string[]);\n    };\n\n    const handleChangeMultiple = (event: React.ChangeEvent<{ value: unknown }>) => {\n        const { options } = event.target as HTMLSelectElement;\n        const value: string[] = [];\n        for (let i = 0, l = options.length; i < l; i += 1) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        setPersonName(value);\n    };\n\n    return (\n        <div>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-mutiple-name-label\">Name</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-name-label\"\n                    id=\"demo-mutiple-name\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    MenuProps={MenuProps}\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-mutiple-checkbox-label\">Tag</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-checkbox-label\"\n                    id=\"demo-mutiple-checkbox\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => (selected as string[]).join(', ')}\n                    MenuProps={MenuProps}\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name}>\n                            <Checkbox checked={personName.indexOf(name) > -1} />\n                            <ListItemText primary={name} />\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-mutiple-chip-label\">Chip</InputLabel>\n                <Select\n                    labelId=\"demo-mutiple-chip-label\"\n                    id=\"demo-mutiple-chip\"\n                    multiple\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input id=\"select-multiple-chip\" />}\n                    renderValue={(selected) => (\n                        <div className={classes.chips}>\n                            {(selected as string[]).map((value) => (\n                                <Chip key={value} label={value} className={classes.chip} />\n                            ))}\n                        </div>\n                    )}\n                    MenuProps={MenuProps}\n                >\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl className={clsx(classes.formControl, classes.noLabel)}>\n                <Select\n                    multiple\n                    displayEmpty\n                    value={personName}\n                    onChange={handleChange}\n                    input={<Input />}\n                    renderValue={(selected) => {\n                        if ((selected as string[]).length === 0) {\n                            return <em>Placeholder</em>;\n                        }\n\n                        return (selected as string[]).join(', ');\n                    }}\n                    MenuProps={MenuProps}\n                    inputProps={{ 'aria-label': 'Without label' }}\n                >\n                    <MenuItem disabled value=\"\">\n                        <em>Placeholder</em>\n                    </MenuItem>\n                    {names.map((name) => (\n                        <MenuItem key={name} value={name} style={getStyles(name, personName, theme)}>\n                            {name}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <InputLabel shrink htmlFor=\"select-multiple-native\">\n                    Native\n                </InputLabel>\n                <Select\n                    multiple\n                    native\n                    value={personName}\n                    onChange={handleChangeMultiple}\n                    inputProps={{\n                        id: 'select-multiple-native',\n                    }}\n                >\n                    {names.map((name) => (\n                        <option key={name} value={name}>\n                            {name}\n                        </option>\n                    ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\nexport default MultipleSelect;\n"],"sourceRoot":""}