{"version":3,"sources":["webpack://material-ui-chameleon-docs/./src/Pages/TablesPage/Components/SortSelectTable/SortSelectTable.style.ts","webpack://material-ui-chameleon-docs/./src/Pages/TablesPage/Components/SortSelectTable/SortSelectTable.tsx"],"names":[],"mappings":"+aAEA,KAAM,GAAmB,QAAW,CAAC,CAAE,UAAS,aAC5C,QAAa,CACT,KAAM,CACF,YAAa,EAAQ,GACrB,aAAc,EAAQ,IAE1B,UACI,EAAQ,OAAS,QACX,CACI,MAAO,EAAQ,UAAU,KACzB,gBAAiB,SAAQ,EAAQ,UAAU,MAAO,MAEtD,CACI,MAAO,EAAQ,KAAK,QACpB,gBAAiB,EAAQ,UAAU,MAEjD,MAAO,CACH,KAAM,eAKZ,EAAY,QAAW,CAAC,CAAE,aAC5B,QAAa,CACT,eAAgB,CACZ,OAAQ,EACR,KAAM,gBACN,OAAQ,EACR,OAAQ,GACR,SAAU,SACV,QAAS,EACT,SAAU,WACV,IAAK,GACL,MAAO,MCAnB,WAAoB,EAAc,EAAkB,EAAa,EAAe,EAAuB,CACnG,MAAO,CAAE,OAAM,WAAU,MAAK,QAAO,WAGzC,KAAM,GAAO,CACT,EAAW,UAAW,IAAK,IAAK,GAAI,KACpC,EAAW,QAAS,IAAK,GAAM,GAAI,KACnC,EAAW,SAAU,IAAK,GAAM,GAAI,GACpC,EAAW,iBAAkB,IAAK,EAAK,GAAI,GAC3C,EAAW,cAAe,IAAK,GAAM,GAAI,KACzC,EAAW,YAAa,IAAK,IAAK,GAAI,KACtC,EAAW,qBAAsB,IAAK,EAAK,GAAI,KAC/C,EAAW,aAAc,IAAK,EAAK,GAAI,GACvC,EAAW,SAAU,IAAK,GAAM,GAAI,GACpC,EAAW,WAAY,IAAK,GAAK,GAAI,GACrC,EAAW,cAAe,IAAK,EAAG,GAAI,GACtC,EAAW,SAAU,IAAK,GAAM,EAAG,IACnC,EAAW,OAAQ,IAAK,GAAM,GAAI,IAGtC,WAAiC,EAAM,EAAM,EAAkB,CAC3D,MAAI,GAAE,GAAW,EAAE,GACR,GAEP,EAAE,GAAW,EAAE,GACR,EAEJ,EAKX,WACI,EACA,EACsF,CACtF,MAAO,KAAU,OACX,CAAC,EAAG,IAAM,EAAqB,EAAG,EAAG,GACrC,CAAC,EAAG,IAAM,CAAC,EAAqB,EAAG,EAAG,GAGhD,WAAuB,EAAY,EAAoC,CACnE,KAAM,GAAiB,EAAM,IAAI,CAAC,EAAI,IAAU,CAAC,EAAI,IACrD,SAAe,KAAK,CAAC,EAAG,IAAM,CAC1B,KAAM,GAAQ,EAAW,EAAE,GAAI,EAAE,IACjC,MAAI,KAAU,EAAU,EACjB,EAAE,GAAK,EAAE,KAEb,EAAe,IAAK,GAAO,EAAG,IAUzC,KAAM,GAAwB,CAC1B,CAAE,GAAI,OAAQ,QAAS,GAAO,eAAgB,GAAM,MAAO,0BAC3D,CAAE,GAAI,WAAY,QAAS,GAAM,eAAgB,GAAO,MAAO,YAC/D,CAAE,GAAI,MAAO,QAAS,GAAM,eAAgB,GAAO,MAAO,WAC1D,CAAE,GAAI,QAAS,QAAS,GAAM,eAAgB,GAAO,MAAO,aAC5D,CAAE,GAAI,UAAW,QAAS,GAAM,eAAgB,GAAO,MAAO,gBAalE,WAA2B,EAA2B,CAClD,KAAM,CAAE,UAAS,mBAAkB,QAAO,UAAS,cAAa,WAAU,iBAAkB,EACtF,EAAqB,GAA0B,GAAqC,CACtF,EAAc,EAAO,IAGzB,MACI,iBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAW,QAAQ,YACf,gBAAC,IAAD,CACI,cAAe,EAAc,GAAK,EAAc,EAChD,QAAS,EAAW,GAAK,IAAgB,EACzC,SAAU,EACV,WAAY,CAAE,aAAc,0BAGnC,EAAU,IAAK,GACZ,gBAAC,IAAD,CACI,IAAK,EAAS,GACd,MAAO,EAAS,QAAU,QAAU,OACpC,QAAS,EAAS,eAAiB,OAAS,UAC5C,cAAe,IAAY,EAAS,GAAK,EAAQ,IAEjD,gBAAC,IAAD,CACI,OAAQ,IAAY,EAAS,GAC7B,UAAW,IAAY,EAAS,GAAK,EAAQ,MAC7C,QAAS,EAAkB,EAAS,KAEnC,EAAS,MACT,IAAY,EAAS,GAClB,gBAAC,OAAD,CAAM,UAAW,EAAQ,gBACpB,IAAU,OAAS,oBAAsB,oBAE9C,UAahC,KAAM,GAAwB,GAAqC,CAC/D,KAAM,GAAU,IACV,CAAE,eAAgB,EAExB,MACI,iBAAC,IAAD,CAAS,UAAW,QAAK,EAAQ,KAAM,EAAG,EAAQ,WAAY,EAAc,KACvE,EAAc,EACX,gBAAC,IAAD,CAAY,UAAW,EAAQ,MAAO,MAAM,UAAU,QAAQ,YAAY,UAAU,OAC/E,EAAY,aAGjB,gBAAC,IAAD,CAAY,UAAW,EAAQ,MAAO,QAAQ,KAAK,GAAG,aAAa,UAAU,OAAM,aAKtF,EAAc,EACX,gBAAC,KAAD,CAAS,MAAM,UACX,gBAAC,IAAD,CAAY,aAAW,UACnB,gBAAC,IAAD,QAIR,gBAAC,KAAD,CAAS,MAAM,eACX,gBAAC,IAAD,CAAY,aAAW,eACnB,gBAAC,IAAD,UAQxB,YAA2B,CACvB,KAAM,GAAU,IAEV,CAAC,EAAO,GAAY,WAAsB,OAC1C,CAAC,EAAS,GAAc,WAA2B,YACnD,CAAC,EAAU,GAAe,WAAyB,IACnD,CAAC,EAAM,GAAW,WAAe,GACjC,CAAC,EAAO,GAAY,WAAe,IACnC,CAAC,EAAa,IAAkB,WAAe,GAE/C,GAAoB,CAAC,EAAkC,IAAyB,CAElF,EAAS,IADiB,GAAY,IAAU,MAC/B,OAAS,OAC1B,EAAW,IAGT,GAAwB,GAA+C,CACzE,GAAI,EAAM,OAAO,QAAS,CACtB,KAAM,GAAc,EAAK,IAAK,GAAM,EAAE,MACtC,EAAY,GACZ,OAEJ,EAAY,KAGV,GAAc,CAAC,EAAkC,IAAiB,CACpE,KAAM,GAAgB,EAAS,QAAQ,GACvC,GAAI,GAAwB,GAExB,IAAkB,GAClB,EAAc,EAAY,OAAO,EAAU,GACpC,IAAkB,EACzB,EAAc,EAAY,OAAO,EAAS,MAAM,IACzC,IAAkB,EAAS,OAAS,EAC3C,EAAc,EAAY,OAAO,EAAS,MAAM,EAAG,KAC5C,EAAgB,GACvB,GAAc,EAAY,OAAO,EAAS,MAAM,EAAG,GAAgB,EAAS,MAAM,EAAgB,KAGtG,EAAY,IAGV,GAAmB,CAAC,EAAgB,IAAoB,CAC1D,EAAQ,IAGN,GAA2B,GAA+C,CAC5E,GAAe,SAAS,EAAM,OAAO,MAAO,KAC5C,EAAQ,IAGN,GAAqB,GAA+C,CACtE,EAAS,EAAM,OAAO,UAGpB,GAAc,GAAiB,EAAS,QAAQ,KAAU,GAE1D,EAAY,EAAc,KAAK,IAAI,EAAa,EAAK,OAAS,EAAO,GAE3E,MACI,iBAAC,IAAD,CAAK,MAAO,GACR,gBAAC,IAAD,CAAK,QAAQ,OAAO,eAAe,WAAW,GAAI,GAC9C,gBAAC,IAAD,CACI,QAAS,gBAAC,IAAD,CAAQ,QAAS,EAAO,SAAU,KAC3C,MAAM,mBAId,gBAAC,IAAD,KACI,gBAAC,EAAD,CAAsB,YAAa,EAAS,SAE5C,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAO,kBAAgB,aAAa,KAAM,EAAQ,QAAU,SAAU,aAAW,kBAC7E,gBAAC,EAAD,CACI,UACA,YAAa,EAAS,OACtB,QACA,UACA,iBAAkB,GAClB,cAAe,GACf,SAAU,EAAK,SAEnB,gBAAC,IAAD,KACK,EAAW,EAAM,EAAc,EAAO,IAClC,MAAM,EAAO,EAAa,EAAO,EAAc,GAC/C,IAAI,CAAC,EAAK,IAAU,CACjB,KAAM,GAAiB,GAAW,EAAI,MAChC,EAAU,2BAA2B,IAE3C,MACI,iBAAC,IAAD,CACI,MAAK,GACL,QAAU,IAAU,GAAY,GAAO,EAAI,MAC3C,KAAK,WACL,eAAc,EACd,SAAU,GACV,IAAK,EAAI,KACT,SAAU,GAEV,gBAAC,IAAD,CAAW,QAAQ,YACf,gBAAC,IAAD,CACI,QAAS,EACT,WAAY,CAAE,kBAAmB,MAGzC,gBAAC,IAAD,CAAW,UAAU,KAAK,GAAI,EAAS,MAAM,MAAM,QAAQ,QACtD,EAAI,MAET,gBAAC,IAAD,CAAW,MAAM,SAAS,EAAI,UAC9B,gBAAC,IAAD,CAAW,MAAM,SAAS,EAAI,KAC9B,gBAAC,IAAD,CAAW,MAAM,SAAS,EAAI,OAC9B,gBAAC,IAAD,CAAW,MAAM,SAAS,EAAI,YAI7C,EAAY,GACT,gBAAC,IAAD,CAAU,MAAO,CAAE,OAAS,GAAQ,GAAK,IAAM,IAC3C,gBAAC,IAAD,CAAW,QAAS,QAOxC,gBAAC,IAAD,CACI,mBAAoB,CAAC,EAAG,GAAI,IAC5B,UAAU,MACV,MAAO,EAAK,OACZ,cACA,OACA,aAAc,GACd,oBAAqB,OAOzC,SAAe","file":"js/component/tables/sort-select.b2a57a4beb7a05737579.js","sourcesContent":["import { makeStyles, createStyles, lighten } from '@material-ui/core/styles';\n\nconst useToolbarStyles = makeStyles(({ spacing, palette }) =>\n    createStyles({\n        root: {\n            paddingLeft: spacing(2),\n            paddingRight: spacing(1),\n        },\n        highlight:\n            palette.type === 'light'\n                ? {\n                      color: palette.secondary.main,\n                      backgroundColor: lighten(palette.secondary.light, 0.85),\n                  }\n                : {\n                      color: palette.text.primary,\n                      backgroundColor: palette.secondary.dark,\n                  },\n        title: {\n            flex: '1 1 100%',\n        },\n    })\n);\n\nconst useStyles = makeStyles(({ spacing }) =>\n    createStyles({\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    })\n);\n\nexport { useToolbarStyles, useStyles };\n","import React, { Fragment } from 'react';\n\nimport clsx from 'clsx';\n\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\n\nimport { useToolbarStyles, useStyles } from './SortSelectTable.style';\n\ninterface Data {\n    calories: number;\n    carbs: number;\n    fat: number;\n    name: string;\n    protein: number;\n}\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number): Data {\n    return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n    createData('Cupcake', 305, 3.7, 67, 4.3),\n    createData('Donut', 452, 25.0, 51, 4.9),\n    createData('Eclair', 262, 16.0, 24, 6.0),\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\n    createData('Honeycomb', 408, 3.2, 87, 6.5),\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    createData('Jelly Bean', 375, 0.0, 94, 0.0),\n    createData('KitKat', 518, 26.0, 65, 7.0),\n    createData('Lollipop', 392, 0.2, 98, 0.0),\n    createData('Marshmallow', 318, 0, 81, 2.0),\n    createData('Nougat', 360, 19.0, 9, 37.0),\n    createData('Oreo', 437, 18.0, 63, 4.0),\n];\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof Data>(\n    order: Order,\n    orderBy: Key\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface HeadCell {\n    disablePadding: boolean;\n    id: keyof Data;\n    label: string;\n    numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n    { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n    { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n    { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n    { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n];\n\ninterface EnhancedTableProps {\n    classes: ReturnType<typeof useStyles>;\n    numSelected: number;\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\n    onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    order: Order;\n    orderBy: string;\n    rowCount: number;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\ninterface EnhancedTableToolbarProps {\n    numSelected: number;\n}\n\nconst EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n\n    return (\n        <Toolbar className={clsx(classes.root, { [classes.highlight]: numSelected > 0 })}>\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton aria-label=\"filter list\">\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nfunction SortSelectTable() {\n    const classes = useStyles();\n\n    const [order, setOrder] = React.useState<Order>('asc');\n    const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\n    const [selected, setSelected] = React.useState<string[]>([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof Data) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.checked) {\n            const newSelected = rows.map((n) => n.name);\n            setSelected(newSelected);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected: string[] = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event: unknown, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name: string) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <Box width={1}>\n            <Box display=\"flex\" justifyContent=\"flex-end\" mb={2}>\n                <FormControlLabel\n                    control={<Switch checked={dense} onChange={handleChangeDense} />}\n                    label=\"Dense padding\"\n                />\n            </Box>\n\n            <Paper>\n                <EnhancedTableToolbar numSelected={selected.length} />\n\n                <TableContainer>\n                    <Table aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'} aria-label=\"enhanced table\">\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.name);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.name)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.name}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.name}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{row.calories}</TableCell>\n                                            <TableCell align=\"right\">{row.fat}</TableCell>\n                                            <TableCell align=\"right\">{row.carbs}</TableCell>\n                                            <TableCell align=\"right\">{row.protein}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </Box>\n    );\n}\n\nexport default SortSelectTable;\n"],"sourceRoot":""}